#!/usr/bin/env python3
"""
Test script for Import-Team Management Integration
"""

import os
import json
import sys
from datetime import datetime

def test_bonus_config():
    """Test 1: Ki·ªÉm tra file config bonus rates"""
    print("=== TEST 1: KI·ªÇM TRA FILE CONFIG BONUS RATES ===")
    
    config_file = "src/data/config/bonus_rates.json"
    if not os.path.exists(config_file):
        print("‚ùå File bonus_rates.json kh√¥ng t·ªìn t·∫°i")
        return False
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # Check structure
        required_keys = ['default_rates', 'specific_rates']
        for key in required_keys:
            if key not in config:
                print(f"‚ùå Thi·∫øu key: {key}")
                return False
        
        # Check default rates
        default_rates = config['default_rates']
        expected_materials = ['B·∫Øp', 'N√†nh', 'C√°m g·∫°o', 'Kh√°c']
        
        for material in expected_materials:
            if material not in default_rates:
                print(f"‚ùå Thi·∫øu m·ª©c th∆∞·ªüng cho: {material}")
                return False
            
            rate = default_rates[material]
            if not isinstance(rate, (int, float)) or rate < 0:
                print(f"‚ùå M·ª©c th∆∞·ªüng kh√¥ng h·ª£p l·ªá cho {material}: {rate}")
                return False
        
        print("‚úÖ File config bonus rates h·ª£p l·ªá")
        print(f"   - Default rates: {len(default_rates)} lo·∫°i")
        print(f"   - Specific rates: {len(config['specific_rates'])} nguy√™n li·ªáu")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc config: {str(e)}")
        return False

def test_import_participation_structure():
    """Test 2: Ki·ªÉm tra c·∫•u tr√∫c import participation"""
    print("\n=== TEST 2: KI·ªÇM TRA C·∫§U TR√öC IMPORT PARTICIPATION ===")
    
    participation_file = "src/data/import_participation.json"
    if not os.path.exists(participation_file):
        print("‚ö†Ô∏è File import_participation.json ch∆∞a t·ªìn t·∫°i (ch∆∞a c√≥ d·ªØ li·ªáu)")
        return True
    
    try:
        with open(participation_file, 'r', encoding='utf-8') as f:
            participation_data = json.load(f)
        
        print(f"‚úÖ T√¨m th·∫•y {len(participation_data)} b·∫£n ghi participation")
        
        # Check structure of each entry
        for import_key, data in participation_data.items():
            required_fields = ['date', 'material_type', 'ingredient', 'amount', 'participants']
            
            for field in required_fields:
                if field not in data:
                    print(f"‚ùå Entry {import_key} thi·∫øu field: {field}")
                    return False
            
            # Check participants structure
            participants = data['participants']
            if not isinstance(participants, list):
                print(f"‚ùå Participants ph·∫£i l√† list: {import_key}")
                return False
            
            for participant in participants:
                if not isinstance(participant, dict):
                    print(f"‚ùå Participant ph·∫£i l√† dict: {import_key}")
                    return False
                
                participant_fields = ['id', 'name', 'position']
                for field in participant_fields:
                    if field not in participant:
                        print(f"‚ùå Participant thi·∫øu field {field}: {import_key}")
                        return False
        
        print("‚úÖ C·∫•u tr√∫c import participation h·ª£p l·ªá")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc participation data: {str(e)}")
        return False

def test_data_consistency():
    """Test 3: Ki·ªÉm tra t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu"""
    print("\n=== TEST 3: KI·ªÇM TRA T√çNH NH·∫§T QU√ÅN D·ªÆ LI·ªÜU ===")
    
    # Check employees data
    employees_file = "src/data/employees.json"
    if not os.path.exists(employees_file):
        print("‚ùå File employees.json kh√¥ng t·ªìn t·∫°i")
        return False
    
    try:
        with open(employees_file, 'r', encoding='utf-8') as f:
            employees = json.load(f)
        
        employee_ids = set(str(emp.get('id', '')) for emp in employees)
        print(f"‚úÖ T√¨m th·∫•y {len(employee_ids)} nh√¢n vi√™n")
        
        # Check participation data references valid employees
        participation_file = "src/data/import_participation.json"
        if os.path.exists(participation_file):
            with open(participation_file, 'r', encoding='utf-8') as f:
                participation_data = json.load(f)
            
            invalid_refs = 0
            for import_key, data in participation_data.items():
                participants = data.get('participants', [])
                for participant in participants:
                    participant_id = str(participant.get('id', ''))
                    if participant_id not in employee_ids:
                        print(f"‚ö†Ô∏è Invalid employee reference: {participant_id} in {import_key}")
                        invalid_refs += 1
            
            if invalid_refs == 0:
                print("‚úÖ T·∫•t c·∫£ references ƒë·ªÅu h·ª£p l·ªá")
            else:
                print(f"‚ö†Ô∏è T√¨m th·∫•y {invalid_refs} invalid references")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra consistency: {str(e)}")
        return False

def test_material_categorization():
    """Test 4: Ki·ªÉm tra ph√¢n lo·∫°i nguy√™n li·ªáu"""
    print("\n=== TEST 4: KI·ªÇM TRA PH√ÇN LO·∫†I NGUY√äN LI·ªÜU ===")
    
    def categorize_material(ingredient_name):
        """Helper function to categorize materials"""
        ingredient_lower = ingredient_name.lower()
        
        if 'b·∫Øp' in ingredient_lower or 'corn' in ingredient_lower:
            return 'B·∫Øp'
        elif 'n√†nh' in ingredient_lower or 'soybean' in ingredient_lower or 'ƒë·∫≠u n√†nh' in ingredient_lower:
            return 'N√†nh'
        elif 'ƒë√° h·∫°t' in ingredient_lower or 'stone' in ingredient_lower or 'gravel' in ingredient_lower:
            return 'ƒê√° h·∫°t'
        elif 'c√°m g·∫°o' in ingredient_lower or 'rice bran' in ingredient_lower or 'c√°m' in ingredient_lower:
            return 'C√°m g·∫°o'
        else:
            return 'Kh√°c'
    
    # Test cases
    test_cases = [
        ("B·∫Øp", "B·∫Øp"),
        ("N√†nh", "N√†nh"),
        ("ƒê·∫≠u n√†nh", "N√†nh"),
        ("C√°m g·∫°o", "C√°m g·∫°o"),
        ("ƒê√° h·∫°t", "ƒê√° h·∫°t"),
        ("DL-Methionine", "Kh√°c"),
        ("L-Lysine", "Kh√°c"),
        ("Bio-Choline", "Kh√°c"),
    ]
    
    all_passed = True
    for ingredient, expected in test_cases:
        result = categorize_material(ingredient)
        if result == expected:
            print(f"‚úÖ {ingredient} ‚Üí {result}")
        else:
            print(f"‚ùå {ingredient} ‚Üí {result} (expected: {expected})")
            all_passed = False
    
    return all_passed

def test_workflow_simulation():
    """Test 5: M√¥ ph·ªèng workflow t√≠ch h·ª£p"""
    print("\n=== TEST 5: M√î PH·ªéNG WORKFLOW T√çCH H·ª¢P ===")
    
    # Simulate import workflow
    print("üìù M√¥ ph·ªèng quy tr√¨nh:")
    print("1. User nh·∫≠p h√†ng ‚Üí Ch·ªçn nguy√™n li·ªáu v√† s·ªë l∆∞·ª£ng")
    print("2. H·ªá th·ªëng hi·ªÉn th·ªã dialog ch·ªçn nh√¢n vi√™n")
    print("3. L∆∞u d·ªØ li·ªáu nh·∫≠p kho + danh s√°ch nh√¢n vi√™n")
    print("4. D·ªØ li·ªáu ƒë∆∞·ª£c s·ª≠ d·ª•ng cho t√≠nh th∆∞·ªüng")
    
    # Check if all required files exist
    required_files = [
        "src/data/employees.json",
        "src/data/config/bonus_rates.json"
    ]
    
    optional_files = [
        "src/data/import_participation.json",
        "src/data/attendance.json"
    ]
    
    print("\nüìÅ Ki·ªÉm tra files c·∫ßn thi·∫øt:")
    all_required_exist = True
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} (b·∫Øt bu·ªôc)")
            all_required_exist = False
    
    for file_path in optional_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ö†Ô∏è {file_path} (t√πy ch·ªçn)")
    
    if all_required_exist:
        print("‚úÖ Workflow c√≥ th·ªÉ ho·∫°t ƒë·ªông")
        return True
    else:
        print("‚ùå Thi·∫øu files b·∫Øt bu·ªôc")
        return False

def main():
    """Main test function"""
    print("üß™ KI·ªÇM TRA T√çCH H·ª¢P IMPORT-TEAM MANAGEMENT")
    print("=" * 60)
    
    tests = [
        test_bonus_config,
        test_import_participation_structure,
        test_data_consistency,
        test_material_categorization,
        test_workflow_simulation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test th·∫•t b·∫°i: {str(e)}")
    
    print(f"\nüìä K·∫æT QU·∫¢: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ T√çCH H·ª¢P TH√ÄNH C√îNG!")
        print("‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng cho production")
    else:
        print("‚ö†Ô∏è C√ì M·ªòT S·ªê V·∫§N ƒê·ªÄ C·∫¶N KH·∫ÆC PH·ª§C")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
