#!/usr/bin/env python3
"""
T·∫°o d·ªØ li·ªáu b√°o c√°o gi·∫£ cho m·ªôt th√°ng t·ªõi
"""

import json
import os
import random
from datetime import datetime, timedelta
from pathlib import Path

def create_reports_directory():
    """T·∫°o th∆∞ m·ª•c reports n·∫øu ch∆∞a c√≥"""
    reports_dir = Path("src/data/reports")
    reports_dir.mkdir(parents=True, exist_ok=True)
    return reports_dir

def generate_feed_usage(date_obj=None):
    """T·∫°o d·ªØ li·ªáu s·ª≠ d·ª•ng c√°m ng·∫´u nhi√™n v·ªõi bi·∫øn th·ªÉ theo ng√†y"""
    areas = {
        "Khu 1": ["T1", "T2", "T4", "T6"],
        "Khu 2": ["T1", "T2", "T4", "T6"],
        "Khu 3": ["1D", "2D", "4D", "2N"],
        "Khu 4": ["T2", "T4", "T6", "T8", "Tr·∫°i 1 khu 4"],
        "Khu 5": [""]
    }

    # T·∫°o bi·∫øn th·ªÉ theo ng√†y trong tu·∫ßn
    weekday_multiplier = 1.0
    if date_obj:
        weekday = date_obj.weekday()  # 0=Monday, 6=Sunday
        if weekday in [5, 6]:  # Weekend
            weekday_multiplier = 0.8  # √çt ho·∫°t ƒë·ªông h∆°n cu·ªëi tu·∫ßn
        elif weekday in [0, 1]:  # Monday, Tuesday
            weekday_multiplier = 1.2  # Nhi·ªÅu ho·∫°t ƒë·ªông ƒë·∫ßu tu·∫ßn

    feed_usage = {}
    for area, farms in areas.items():
        feed_usage[area] = {}
        for farm in farms:
            # T·∫°o gi√° tr·ªã ng·∫´u nhi√™n cho s√°ng v√† chi·ªÅu
            base_morning = random.uniform(0.3, 1.5) * weekday_multiplier
            base_afternoon = random.uniform(0.3, 1.5) * weekday_multiplier

            morning = round(max(0, base_morning), 1)
            afternoon = round(max(0, base_afternoon), 1)

            # ƒê√¥i khi kh√¥ng s·ª≠ d·ª•ng (15% c∆° h·ªôi)
            if random.random() < 0.15:
                morning = 0.0
            if random.random() < 0.15:
                afternoon = 0.0

            feed_usage[area][farm] = {
                "S√°ng": morning,
                "Chi·ªÅu": afternoon
            }

    return feed_usage

def generate_formula_usage():
    """T·∫°o d·ªØ li·ªáu c√¥ng th·ª©c s·ª≠ d·ª•ng"""
    areas = {
        "Khu 1": ["T1", "T2", "T4", "T6"],
        "Khu 2": ["T1", "T2", "T4", "T6"],
        "Khu 3": ["1D", "2D", "4D", "2N"],
        "Khu 4": ["T2", "T4", "T6", "T8", "Tr·∫°i 1 khu 4"],
        "Khu 5": [""]
    }

    formulas = ["GD", "CT2", "CT3"]

    formula_usage = {}
    for area, farms in areas.items():
        formula_usage[area] = {}
        for farm in farms:
            # Ch·ªçn c√¥ng th·ª©c ng·∫´u nhi√™n, GD c√≥ t·ª∑ l·ªá cao h∆°n
            morning_formula = random.choices(formulas, weights=[70, 20, 10])[0]
            afternoon_formula = random.choices(formulas, weights=[70, 20, 10])[0]

            formula_usage[area][farm] = {
                "S√°ng": morning_formula,
                "Chi·ªÅu": afternoon_formula
            }

    return formula_usage

def generate_feed_ingredients(total_batches):
    """T·∫°o d·ªØ li·ªáu nguy√™n li·ªáu c√°m d·ª±a tr√™n s·ªë m·∫ª"""
    base_ingredients = {
        "B·∫Øp": 1200,
        "N√†nh": 450,
        "D·∫ßu": 8,
        "Nguy√™n li·ªáu t·ªï h·ª£p": 32.9,
        "DCP": 25,
        "ƒê√° h·∫°t": 32,
        "ƒê√° b·ªôt m·ªãn": 45,
        "C√°m g·∫°o": 260
    }

    feed_ingredients = {}
    for ingredient, base_amount in base_ingredients.items():
        # Th√™m bi·∫øn ƒë·ªông ng·∫´u nhi√™n ¬±20%
        variation = random.uniform(0.8, 1.2)
        amount = base_amount * total_batches * variation
        feed_ingredients[ingredient] = round(amount, 1)

    return feed_ingredients

def generate_mix_ingredients(total_batches):
    """T·∫°o d·ªØ li·ªáu nguy√™n li·ªáu mix d·ª±a tr√™n s·ªë m·∫ª"""
    base_ingredients = {
        "L-Lysine": 1.6,
        "DL-Methionine": 3.0,
        "Bio-Choline": 0.4,
        "Phytast": 0.3,
        "Performix 0.25% layer": 0.0,
        "Miamix": 0.5,
        "Premix 0.25% layer": 6.0,
        "Compound Enzyme FE808E": 0.3,
        "Carophy Red (M√†u ƒë·ªè)": 0.6,
        "P-Zym": 0.4,
        "Oxytetracylin": 0.05,
        "Tiamulin": 0.05,
        "Amox": 0.0,
        "Immunewall": 0.2,
        "Lysoforte Dry": 0.5,
        "Nutriprotect": 0.15,
        "Defitox L1": 1.6,
        "Men Ecobiol": 0.6,
        "Lactic LD (axit h·ªØu c∆°)": 2.0,
        "Sodium bicarbonate": 2.0,
        "B·ªôt ƒë√° m·ªãn": 4.5,
        "Mu·ªëi": 7.4,
        "DCP": 1.0
    }

    mix_ingredients = {}
    for ingredient, base_amount in base_ingredients.items():
        # Th√™m bi·∫øn ƒë·ªông ng·∫´u nhi√™n ¬±15%
        variation = random.uniform(0.85, 1.15)
        amount = base_amount * total_batches * variation

        # ƒê√¥i khi m·ªôt s·ªë nguy√™n li·ªáu kh√¥ng s·ª≠ d·ª•ng
        if random.random() < 0.1:  # 10% c∆° h·ªôi kh√¥ng s·ª≠ d·ª•ng
            amount = 0.0

        mix_ingredients[ingredient] = round(amount, 1)

    return mix_ingredients

def calculate_total_batches(feed_usage):
    """T√≠nh t·ªïng s·ªë m·∫ª t·ª´ d·ªØ li·ªáu s·ª≠ d·ª•ng c√°m"""
    total = 0
    total_by_area = {}

    for area, farms in feed_usage.items():
        area_total = 0
        for farm, shifts in farms.items():
            area_total += shifts["S√°ng"] + shifts["Chi·ªÅu"]
        total_by_area[area] = area_total
        total += area_total

    return total, total_by_area

def generate_column_mix_formulas():
    """T·∫°o d·ªØ li·ªáu c√¥ng th·ª©c mix cho c√°c c·ªôt"""
    formulas = [
        "Khu 1-5",
        "Khu 2(1, 2, 3, 6)",
        "Khu 2(4,5)",
        "Khu 3 - G√† con c√¥ng th·ª©c",
        "Khu 4(2, 3, 4, 5)",
        "Khu 4(6, 7, 8)"
    ]

    column_mix_formulas = {}
    for i in range(18):  # 18 c·ªôt
        formula = random.choice(formulas)
        column_mix_formulas[str(i)] = formula

    return column_mix_formulas

def generate_report_for_date(date_obj):
    """T·∫°o b√°o c√°o cho m·ªôt ng√†y c·ª• th·ªÉ"""
    date_str = date_obj.strftime("%Y%m%d")
    display_date = date_obj.strftime("%d/%m/%Y")

    # T·∫°o d·ªØ li·ªáu v·ªõi bi·∫øn th·ªÉ theo ng√†y
    feed_usage = generate_feed_usage(date_obj)
    formula_usage = generate_formula_usage()
    total_batches, total_batches_by_area = calculate_total_batches(feed_usage)

    feed_ingredients = generate_feed_ingredients(total_batches)
    mix_ingredients = generate_mix_ingredients(total_batches)

    total_feed = sum(feed_ingredients.values())
    total_mix = sum(mix_ingredients.values())

    column_mix_formulas = generate_column_mix_formulas()

    report = {
        "date": date_str,
        "display_date": display_date,
        "feed_usage": feed_usage,
        "formula_usage": formula_usage,
        "feed_ingredients": feed_ingredients,
        "mix_ingredients": mix_ingredients,
        "total_batches": total_batches,
        "total_batches_by_area": total_batches_by_area,
        "default_formula": "GD",
        "total_feed": round(total_feed, 1),
        "total_mix": round(total_mix, 1),
        "batch_count": total_batches,
        "column_mix_formulas": column_mix_formulas
    }

    return report

def main():
    """H√†m ch√≠nh t·∫°o b√°o c√°o cho m·ªôt th√°ng"""
    print("üîÑ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu b√°o c√°o gi·∫£ cho m·ªôt th√°ng t·ªõi...")

    # T·∫°o th∆∞ m·ª•c reports
    reports_dir = create_reports_directory()

    # Ng√†y b·∫Øt ƒë·∫ßu: 25/07/2025 (ng√†y mai)
    start_date = datetime(2025, 7, 25)

    # T·∫°o b√°o c√°o cho 31 ng√†y
    reports_created = 0

    for i in range(31):
        current_date = start_date + timedelta(days=i)

        # T·∫°o b√°o c√°o cho ng√†y n√†y
        report = generate_report_for_date(current_date)

        # L∆∞u file
        filename = f"report_{current_date.strftime('%Y%m%d')}.json"
        filepath = reports_dir / filename

        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=4)

        reports_created += 1
        print(f"‚úÖ T·∫°o b√°o c√°o: {filename} - {current_date.strftime('%d/%m/%Y')}")

    print(f"\nüéâ Ho√†n th√†nh! ƒê√£ t·∫°o {reports_created} b√°o c√°o t·ª´ {start_date.strftime('%d/%m/%Y')} ƒë·∫øn {(start_date + timedelta(days=30)).strftime('%d/%m/%Y')}")
    print(f"üìÅ C√°c file ƒë∆∞·ª£c l∆∞u trong: {reports_dir}")

    # Th·ªëng k√™
    print(f"\nüìä Th·ªëng k√™:")
    print(f"   - S·ªë b√°o c√°o t·∫°o: {reports_created}")
    print(f"   - Th∆∞ m·ª•c l∆∞u: {reports_dir}")
    print(f"   - ƒê·ªãnh d·∫°ng file: report_YYYYMMDD.json")
    print(f"   - D·ªØ li·ªáu bao g·ªìm: feed_usage, formula_usage, ingredients, batches")

if __name__ == "__main__":
    main()
