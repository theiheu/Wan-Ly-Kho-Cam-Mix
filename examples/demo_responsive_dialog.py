#!/usr/bin/env python3
"""
Demo script for Responsive Threshold Dialog
Cho ph√©p ng∆∞·ªùi d√πng test t√≠nh nƒÉng responsive sizing c·ªßa dialog ng∆∞·ª°ng t·ªìn kho
"""

import sys
import os

# Add src directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                             QWidget, QPushButton, QLabel, QSpinBox, QGroupBox)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from ui.threshold_settings_dialog import ThresholdSettingsDialog

class ResponsiveDialogDemo(QMainWindow):
    """Demo window ƒë·ªÉ test responsive dialog"""
    
    def __init__(self):
        super().__init__()
        self.init_ui()
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán demo"""
        self.setWindowTitle("üéØ Demo Responsive Threshold Dialog")
        self.setGeometry(100, 100, 1200, 800)
        
        # Central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Main layout
        layout = QVBoxLayout(central_widget)
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Header
        header = QLabel("üéØ Demo Responsive Threshold Dialog")
        header.setFont(QFont("Arial", 18, QFont.Bold))
        header.setAlignment(Qt.AlignCenter)
        header.setStyleSheet("""
            QLabel {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #4CAF50, stop:1 #45a049);
                color: white;
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
        """)
        layout.addWidget(header)
        
        # Description
        desc = QLabel(
            "Th·ª≠ nghi·ªám t√≠nh nƒÉng responsive sizing c·ªßa dialog c√†i ƒë·∫∑t ng∆∞·ª°ng t·ªìn kho.\n"
            "Dialog s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc theo c·ª≠a s·ªï ch√≠nh:\n"
            "‚Ä¢ Chi·ªÅu r·ªông: 80% c·ªßa c·ª≠a s·ªï ch√≠nh\n"
            "‚Ä¢ Chi·ªÅu cao: 90% c·ªßa c·ª≠a s·ªï ch√≠nh\n"
            "‚Ä¢ V·ªã tr√≠: CƒÉn gi·ªØa t·ª± ƒë·ªông\n"
            "‚Ä¢ K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu: 1000x800"
        )
        desc.setWordWrap(True)
        desc.setStyleSheet("""
            QLabel {
                background-color: #e3f2fd;
                border: 2px solid #2196f3;
                border-radius: 8px;
                padding: 15px;
                color: #1976d2;
                font-size: 12px;
                line-height: 1.4;
            }
        """)
        layout.addWidget(desc)
        
        # Controls
        self.create_controls(layout)
        
        # Current size display
        self.create_size_display(layout)
        
        # Test button
        test_btn = QPushButton("üöÄ M·ªü Dialog Ng∆∞·ª°ng T·ªìn Kho")
        test_btn.setMinimumHeight(50)
        test_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 15px 30px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover { background-color: #F57C00; }
            QPushButton:pressed { background-color: #E65100; }
        """)
        test_btn.clicked.connect(self.open_threshold_dialog)
        layout.addWidget(test_btn)
        
        layout.addStretch()
        
        # Update size display
        self.update_size_display()
    
    def create_controls(self, layout):
        """T·∫°o controls ƒë·ªÉ thay ƒë·ªïi k√≠ch th∆∞·ªõc window"""
        controls_group = QGroupBox("üîß ƒêi·ªÅu Khi·ªÉn K√≠ch Th∆∞·ªõc C·ª≠a S·ªï")
        controls_group.setFont(QFont("Arial", 12, QFont.Bold))
        controls_layout = QVBoxLayout(controls_group)
        
        # Preset sizes
        presets_layout = QHBoxLayout()
        
        preset_sizes = [
            (1000, 700, "Nh·ªè"),
            (1200, 800, "V·ª´a"),
            (1600, 1000, "L·ªõn"),
            (1920, 1080, "Full HD")
        ]
        
        for width, height, name in preset_sizes:
            btn = QPushButton(f"{name}\n{width}x{height}")
            btn.setMinimumHeight(60)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 6px;
                    font-weight: bold;
                }
                QPushButton:hover { background-color: #1976D2; }
            """)
            btn.clicked.connect(lambda checked, w=width, h=height: self.resize_window(w, h))
            presets_layout.addWidget(btn)
        
        controls_layout.addLayout(presets_layout)
        
        # Custom size controls
        custom_layout = QHBoxLayout()
        
        custom_layout.addWidget(QLabel("T√πy ch·ªânh:"))
        
        custom_layout.addWidget(QLabel("R·ªông:"))
        self.width_spin = QSpinBox()
        self.width_spin.setRange(800, 3000)
        self.width_spin.setValue(1200)
        self.width_spin.setSuffix(" px")
        custom_layout.addWidget(self.width_spin)
        
        custom_layout.addWidget(QLabel("Cao:"))
        self.height_spin = QSpinBox()
        self.height_spin.setRange(600, 2000)
        self.height_spin.setValue(800)
        self.height_spin.setSuffix(" px")
        custom_layout.addWidget(self.height_spin)
        
        apply_btn = QPushButton("√Åp d·ª•ng")
        apply_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #45a049; }
        """)
        apply_btn.clicked.connect(self.apply_custom_size)
        custom_layout.addWidget(apply_btn)
        
        custom_layout.addStretch()
        controls_layout.addLayout(custom_layout)
        
        layout.addWidget(controls_group)
    
    def create_size_display(self, layout):
        """T·∫°o hi·ªÉn th·ªã k√≠ch th∆∞·ªõc hi·ªán t·∫°i"""
        self.size_label = QLabel()
        self.size_label.setStyleSheet("""
            QLabel {
                background-color: #f8f9fa;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
                color: #495057;
                font-family: 'Courier New', monospace;
                font-size: 12px;
            }
        """)
        layout.addWidget(self.size_label)
    
    def resize_window(self, width, height):
        """Thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï"""
        self.resize(width, height)
        self.width_spin.setValue(width)
        self.height_spin.setValue(height)
        self.update_size_display()
    
    def apply_custom_size(self):
        """√Åp d·ª•ng k√≠ch th∆∞·ªõc t√πy ch·ªânh"""
        width = self.width_spin.value()
        height = self.height_spin.value()
        self.resize(width, height)
        self.update_size_display()
    
    def update_size_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã k√≠ch th∆∞·ªõc"""
        size = self.size()
        width = size.width()
        height = size.height()
        
        # T√≠nh to√°n k√≠ch th∆∞·ªõc dialog d·ª± ki·∫øn
        dialog_width = max(int(width * 0.8), 1000)
        dialog_height = max(int(height * 0.9), 800)
        
        display_text = f"""üìè K√≠ch Th∆∞·ªõc C·ª≠a S·ªï Hi·ªán T·∫°i:
   C·ª≠a s·ªï ch√≠nh: {width} x {height} px
   
üéØ K√≠ch Th∆∞·ªõc Dialog D·ª± Ki·∫øn:
   Chi·ªÅu r·ªông: {dialog_width} px (80% c·ªßa {width} px, t·ªëi thi·ªÉu 1000 px)
   Chi·ªÅu cao: {dialog_height} px (90% c·ªßa {height} px, t·ªëi thi·ªÉu 800 px)
   
üìç V·ªã tr√≠ Dialog:
   CƒÉn gi·ªØa t·ª± ƒë·ªông so v·ªõi c·ª≠a s·ªï ch√≠nh"""
        
        self.size_label.setText(display_text)
    
    def resizeEvent(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc"""
        super().resizeEvent(event)
        self.update_size_display()
    
    def open_threshold_dialog(self):
        """M·ªü dialog ng∆∞·ª°ng t·ªìn kho"""
        try:
            dialog = ThresholdSettingsDialog(self)
            dialog.exec_()
        except Exception as e:
            print(f"Error opening dialog: {e}")

def main():
    """Ch·∫°y demo responsive dialog"""
    app = QApplication(sys.argv)
    
    # T·∫°o demo window
    demo = ResponsiveDialogDemo()
    demo.show()
    
    print("üéØ Demo Responsive Threshold Dialog")
    print("=" * 50)
    print("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
    print("1. Thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï b·∫±ng c√°c n√∫t preset ho·∫∑c t√πy ch·ªânh")
    print("2. Quan s√°t th√¥ng tin k√≠ch th∆∞·ªõc dialog d·ª± ki·∫øn")
    print("3. Nh·∫•n 'M·ªü Dialog Ng∆∞·ª°ng T·ªìn Kho' ƒë·ªÉ test")
    print("4. Dialog s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc v√† cƒÉn gi·ªØa")
    print("5. Th·ª≠ v·ªõi nhi·ªÅu k√≠ch th∆∞·ªõc kh√°c nhau ƒë·ªÉ test responsive")
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
