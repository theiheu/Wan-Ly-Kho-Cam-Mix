#!/usr/bin/env python3
"""
Smart Cleanup Script for Chicken Farm Management Software
D·ªçn d·∫πp th√¥ng minh c√°c file build t·∫°m th·ªùi
"""

import os
import shutil
import glob
import sys
from pathlib import Path

def clean_build_artifacts():
    """X√≥a c√°c file artifacts t·ª´ qu√° tr√¨nh build"""
    print("üßπ D·ªçn d·∫πp build artifacts...")

    # Th∆∞ m·ª•c build t·∫°m th·ªùi
    build_dirs = ['build']
    for build_dir in build_dirs:
        if os.path.exists(build_dir):
            try:
                shutil.rmtree(build_dir)
                print(f"‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c: {build_dir}/")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a {build_dir}: {e}")

    # File .spec t·ª± ƒë·ªông t·∫°o
    spec_files = glob.glob('*.spec')
    for spec_file in spec_files:
        try:
            os.remove(spec_file)
            print(f"‚úÖ ƒê√£ x√≥a file spec: {spec_file}")
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a {spec_file}: {e}")

    # File version info
    version_files = ['version_info.txt']
    for version_file in version_files:
        if os.path.exists(version_file):
            try:
                os.remove(version_file)
                print(f"‚úÖ ƒê√£ x√≥a: {version_file}")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a {version_file}: {e}")

def clean_pycache():
    """X√≥a t·∫•t c·∫£ __pycache__ folders"""
    print("üßπ D·ªçn d·∫πp __pycache__ folders...")

    for root, dirs, files in os.walk('.'):
        if '__pycache__' in dirs:
            pycache_path = os.path.join(root, '__pycache__')
            try:
                shutil.rmtree(pycache_path)
                print(f"‚úÖ ƒê√£ x√≥a: {pycache_path}")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a {pycache_path}: {e}")

def clean_pyc_files():
    """X√≥a t·∫•t c·∫£ .pyc files"""
    print("üßπ D·ªçn d·∫πp .pyc files...")

    pyc_files = glob.glob('**/*.pyc', recursive=True)
    for pyc_file in pyc_files:
        try:
            os.remove(pyc_file)
            print(f"‚úÖ ƒê√£ x√≥a: {pyc_file}")
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a {pyc_file}: {e}")

def clean_temp_files():
    """X√≥a c√°c file t·∫°m th·ªùi kh√°c"""
    print("üßπ D·ªçn d·∫πp file t·∫°m th·ªùi...")

    # File log v√† temp
    temp_patterns = [
        '*.log',
        '*.tmp',
        '*.temp',
        '.DS_Store',
        'Thumbs.db'
    ]

    for pattern in temp_patterns:
        temp_files = glob.glob(pattern, recursive=False)
        for temp_file in temp_files:
            try:
                os.remove(temp_file)
                print(f"‚úÖ ƒê√£ x√≥a file t·∫°m: {temp_file}")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a {temp_file}: {e}")

def clean_old_packages():
    """T√πy ch·ªçn x√≥a packages v√† ZIP c≈©"""
    print("ü§î T√¨m th·∫•y packages v√† ZIP files t·ª´ build tr∆∞·ªõc:")

    # Ki·ªÉm tra packages
    packages_exist = os.path.exists("packages") and os.listdir("packages")
    zip_files = glob.glob("*.zip")

    if packages_exist or zip_files:
        if packages_exist:
            print("  üìÅ Th∆∞ m·ª•c packages/ t·ªìn t·∫°i")
        for zip_file in zip_files:
            size = get_size_info(zip_file)
            print(f"  üìÑ {zip_file} {size}")

        print("\n‚ùì B·∫°n c√≥ mu·ªën x√≥a packages v√† ZIP c≈© kh√¥ng?")
        print("   Y = X√≥a (ƒë·ªÉ t·∫°o package m·ªõi)")
        print("   N = Gi·ªØ l·∫°i (khuy·∫øn ngh·ªã)")

        try:
            choice = input("Ch·ªçn (Y/N): ").strip().upper()
            if choice == 'Y':
                if packages_exist:
                    shutil.rmtree("packages")
                    print("‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c packages/")

                for zip_file in zip_files:
                    os.remove(zip_file)
                    print(f"‚úÖ ƒê√£ x√≥a {zip_file}")

                print("üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y create_package.py ƒë·ªÉ t·∫°o m·ªõi")
            else:
                print("üì¶ ƒê√£ gi·ªØ l·∫°i packages v√† ZIP files")
        except KeyboardInterrupt:
            print("\nüì¶ ƒê√£ gi·ªØ l·∫°i packages v√† ZIP files")

def show_preserved_items():
    """Hi·ªÉn th·ªã c√°c item ƒë∆∞·ª£c gi·ªØ l·∫°i"""
    print("üì¶ C√°c file/th∆∞ m·ª•c ƒë∆∞·ª£c GI·ªÆ L·∫†I:")

    preserved_items = [
        'dist/',
        'packages/',
        '*.zip',
        'install.bat',
        'README_DISTRIBUTION.txt'
    ]

    for item in preserved_items:
        if '*' in item:
            # Pattern matching
            matches = glob.glob(item)
            for match in matches:
                if os.path.exists(match):
                    size = get_size_info(match)
                    print(f"  ‚úÖ {match} {size}")
        else:
            if os.path.exists(item):
                size = get_size_info(item)
                print(f"  ‚úÖ {item} {size}")

def get_size_info(path):
    """L·∫•y th√¥ng tin k√≠ch th∆∞·ªõc file/folder"""
    try:
        if os.path.isfile(path):
            size = os.path.getsize(path)
            return f"({size / (1024*1024):.1f} MB)"
        elif os.path.isdir(path):
            total_size = 0
            for dirpath, dirnames, filenames in os.walk(path):
                for filename in filenames:
                    filepath = os.path.join(dirpath, filename)
                    try:
                        total_size += os.path.getsize(filepath)
                    except:
                        pass
            return f"({total_size / (1024*1024):.1f} MB)"
    except:
        pass
    return ""

def main():
    """H√†m ch√≠nh"""
    print("üßπ Smart Cleanup Script - Chicken Farm Management")
    print("=" * 60)
    print("üéØ M·ª•c ti√™u: D·ªçn d·∫πp file t·∫°m th·ªùi, GI·ªÆ L·∫†I k·∫øt qu·∫£ build")
    print()

    try:
        # Th·ª±c hi·ªán d·ªçn d·∫πp
        clean_build_artifacts()
        print()
        clean_pycache()
        print()
        clean_pyc_files()
        print()
        clean_temp_files()
        print()

        # T√πy ch·ªçn x√≥a packages c≈©
        clean_old_packages()
        print()

        # Hi·ªÉn th·ªã nh·ªØng g√¨ ƒë∆∞·ª£c gi·ªØ l·∫°i
        show_preserved_items()

        print("\n" + "=" * 60)
        print("üéâ D·ªåN D·∫∏P HO√ÄN T·∫§T!")
        print("=" * 60)
        print("‚úÖ ƒê√£ x√≥a: File t·∫°m th·ªùi, build artifacts, __pycache__")
        print("üì¶ ƒê√£ gi·ªØ: dist/, packages/, *.zip, install.bat")
        print("üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y build m·ªõi ho·∫∑c ph√¢n ph·ªëi package")

        return 0

    except Exception as e:
        print(f"\n‚ùå L·ªói trong qu√° tr√¨nh d·ªçn d·∫πp: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = main()
    input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
    sys.exit(exit_code)
