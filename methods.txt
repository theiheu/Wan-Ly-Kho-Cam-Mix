    from src.utils.default_formulas import PACKAGING_INFO
    from utils.default_formulas import PACKAGING_INFO
def format_number(value):
    def textFromValue(self, value):
    def valueFromText(self, text):
    def __init__(self):
        self.default_formula_loaded = False
    def init_ui(self):
        QTimer.singleShot(200, self.load_default_formula)
    def create_menu_bar(self):
    def show_about_dialog(self):
    def setup_feed_usage_tab(self):
        default_formula_layout = QHBoxLayout()
        default_formula_label = QLabel("Công thức cám mặc định:")
        default_formula_label.setFont(QFont("Arial", DEFAULT_FONT_SIZE))
        default_formula_layout.addWidget(default_formula_label)
        self.default_formula_combo = QComboBox()
        self.default_formula_combo.setFont(QFont("Arial", DEFAULT_FONT_SIZE))
        self.default_formula_combo.setMinimumWidth(200)
        self.default_formula_combo.currentIndexChanged.connect(self.apply_default_formula)
            self.default_formula_combo.addItem(preset)
        default_formula_layout.addWidget(self.default_formula_combo)
        default_formula_layout.addStretch()
        layout.addLayout(default_formula_layout)
                        def on_value_changed(value, spin=spin_box, combo=formula_combo, label=formula_label):
                            self.auto_select_default_formula(value, combo)
                                default_formula = self.default_formula_combo.currentText()
                                if formula_text and formula_text != default_formula:
    def reset_feed_table(self):
    def setup_inventory_tab(self):
    def setup_import_tab(self):
    def import_feed(self):
    def import_mix(self):
    def save_import_history(self, import_type, ingredient, amount, date, note):
    def load_import_history(self):
    def update_feed_import_history(self):
    def update_mix_import_history(self):
    def setup_formula_tab(self):
    def setup_history_tab(self):
    def setup_history_usage_tab(self):
    def setup_history_feed_tab(self):
    def setup_history_mix_tab(self):
    def update_history_dates(self, combo_box=None):
    def load_history_data(self, show_warnings=True):
    def update_history_usage_table(self, report_data):
            default_formula = ""
            if "default_formula" in report_data:
                default_formula = report_data.get("default_formula", "")
            if default_formula:
                default_formula_label = QLabel(f"Công thức mặc định: {default_formula}")
                default_formula_label.setFont(QFont("Arial", DEFAULT_FONT_SIZE, QFont.Bold))
                default_formula_label.setStyleSheet("color: #2196F3; margin-bottom: 10px;")
                history_usage_layout.insertWidget(0, default_formula_label)
                                    if formula and formula != default_formula:
    def update_history_feed_table(self, report_data):
    def update_history_mix_table(self, report_data):
    def visualize_history_data(self):
    def update_feed_formula_table(self):
    def update_mix_formula_table(self):
            def update_one_batch(value, row=i):
    def update_feed_inventory_table(self):
    def update_mix_inventory_table(self):
    def calculate_feed_usage(self):
    def assign_mix_formulas_to_areas(self):
    def save_mix_formula_selections(self, combo_boxes, dialog):
    def apply_mix_formula_to_all(self, mix_formula):
    def update_inventory_after_usage(self, ingredients_used):
    def update_inventory(self, inventory_type):
    def save_feed_formula(self):
    def save_mix_formula(self):
    def save_report(self):
                "default_formula": self.default_formula_combo.currentText()
    def export_to_excel(self):
    def update_feed_preset_combo(self):
    def update_mix_preset_combo(self):
    def load_feed_preset(self):
    def load_mix_preset(self):
    def save_as_feed_preset(self):
    def save_as_mix_preset(self):
    def delete_feed_preset(self):
    def delete_mix_preset(self):
    def compare_history_data(self):
    def update_history_usage_comparison(self, current_data, compare_data):
    def update_history_feed_comparison(self, current_data, compare_data):
    def update_history_mix_comparison(self, current_data, compare_data):
    def export_history_to_excel(self):
    def update_feed_preset(self):
    def update_mix_preset(self):
    def auto_load_feed_preset(self, index):
    def auto_load_mix_preset(self, index):
    def fill_table_from_report(self, date_text):
            if "default_formula" in report_data and report_data["default_formula"]:
                default_formula = report_data["default_formula"]
                self.default_formula_combo.setCurrentText(default_formula)
                self.formula_manager.save_default_feed_formula(default_formula)
                                            default_formula = self.default_formula_combo.currentText()
                                            if formula and formula != default_formula:
    def fill_table_from_custom_date(self, date_text):
            default_formula = ""
                            default_formula = max(formula_counts.items(), key=lambda x: x[1])[0]
            if default_formula:
                self.default_formula_combo.setCurrentText(default_formula)
    def load_latest_report(self):
    def load_report_data(self, date_text):
    def fill_table_by_date(self):
        def toggle_date_source():
    def show_daily_report(self):
    def load_default_formula(self):
        if self.default_formula_loaded:
        default_formula = self.formula_manager.get_default_feed_formula()
        print(f"Tải công thức mặc định: {default_formula}")
        if default_formula:
            self.default_formula_combo.setCurrentText(default_formula)
        self.default_formula_loaded = True
    def on_feed_table_cell_clicked(self, row, column):
    def show_cell_context_menu(self, row, column):
    def apply_mix_formula_to_cell(self, cell_key, mix_formula):
    def update_feed_table_display(self):
                default_formula = self.default_formula_combo.currentText()
                        if formula_text and formula_text != default_formula:
    def apply_formula_to_selected_cell(self, formula):
    def auto_select_default_formula(self, value, combo):
            default_formula = self.default_formula_combo.currentText()
            if default_formula:
                combo.setCurrentText(default_formula)
    def apply_default_formula(self):
        default_formula = self.default_formula_combo.currentText()
        self.formula_manager.save_default_feed_formula(default_formula)
        if not default_formula:
                    cell_widget.formula_combo.setCurrentText(default_formula)
        if not default_formula:
                    cell_widget.formula_combo.setCurrentText(default_formula)
    def setup_inventory_tab(self):
def main():
