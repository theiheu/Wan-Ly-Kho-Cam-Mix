#!/usr/bin/env python3
"""
Threshold Settings Dialog - Giao di·ªán c√†i ƒë·∫∑t ng∆∞·ª°ng c·∫£nh b√°o t·ªìn kho
"""

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel,
                             QSpinBox, QDoubleSpinBox, QCheckBox, QPushButton,
                             QGroupBox, QGridLayout, QMessageBox, QTabWidget,
                             QWidget, QTextEdit, QFrame, QComboBox, QSlider,
                             QTimeEdit, QLineEdit, QColorDialog, QTableWidget,
                             QTableWidgetItem, QHeaderView)
from PyQt5.QtCore import Qt, QTime
from PyQt5.QtGui import QFont, QIcon, QColor

try:
    from src.core.threshold_manager import ThresholdManager
    from src.core.inventory_manager import InventoryManager
except ImportError:
    from core.threshold_manager import ThresholdManager
    from core.inventory_manager import InventoryManager

class ThresholdSettingsDialog(QDialog):
    """Dialog c√†i ƒë·∫∑t ng∆∞·ª°ng c·∫£nh b√°o t·ªìn kho"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.threshold_manager = ThresholdManager()
        self.inventory_manager = InventoryManager()
        self.init_ui()
        self.load_current_settings()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán v·ªõi k√≠ch th∆∞·ªõc t∆∞∆°ng ƒë·ªëi"""
        self.setWindowTitle("‚öôÔ∏è C√†i ƒê·∫∑t Ng∆∞·ª°ng T·ªìn Kho - Th·ªëng Nh·∫•t")
        self.setModal(True)

        # T√≠nh to√°n k√≠ch th∆∞·ªõc d·ª±a tr√™n parent window
        self.calculate_and_set_size()

        # Main layout v·ªõi spacing t·ªëi ∆∞u
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        layout.setContentsMargins(25, 25, 25, 25)

        # Header
        header = QLabel("‚öôÔ∏è C√†i ƒê·∫∑t Ng∆∞·ª°ng C·∫£nh B√°o T·ªìn Kho")
        header.setFont(QFont("Arial", 16, QFont.Bold))
        header.setAlignment(Qt.AlignCenter)
        header.setStyleSheet("""
            QLabel {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4CAF50, stop:1 #45a049);
                color: white;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(header)

        # Create tabs
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                background: white;
            }
            QTabBar::tab {
                background: #f0f0f0;
                border: 1px solid #ccc;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            QTabBar::tab:selected {
                background: #4CAF50;
                color: white;
            }
        """)

        # Tab 1: C√†i ƒë·∫∑t theo ng√†y
        self.create_days_tab()

        # Tab 2: C√†i ƒë·∫∑t theo t·ªìn kho
        self.create_stock_tab()

        # Tab 3: Ng∆∞·ª°ng ri√™ng bi·ªát (di chuy·ªÉn l√™n ƒë·ªÉ t·∫°o lu·ªìng logic)
        self.create_individual_threshold_tab()

        # Tab 4: C√†i ƒë·∫∑t ∆∞u ti√™n
        self.create_priority_tab()

        # Tab 5: C√†i ƒë·∫∑t hi·ªÉn th·ªã
        self.create_display_tab()

        # Tab 6: C√†i ƒë·∫∑t √¢m thanh
        self.create_sound_tab()

        # Tab 7: C√†i ƒë·∫∑t t·ª± ƒë·ªông
        self.create_automation_tab()

        # Tab 8: C√†i ƒë·∫∑t m√†u s·∫Øc
        self.create_color_tab()

        layout.addWidget(self.tab_widget)

        # Current settings display
        self.create_current_settings_display(layout)

        # Buttons
        self.create_buttons(layout)

    def calculate_and_set_size(self):
        """T√≠nh to√°n v√† ƒë·∫∑t k√≠ch th∆∞·ªõc dialog d·ª±a tr√™n parent window"""
        try:
            # L·∫•y k√≠ch th∆∞·ªõc parent window
            if self.parent():
                parent_size = self.parent().size()
                parent_width = parent_size.width()
                parent_height = parent_size.height()

                # T√≠nh to√°n k√≠ch th∆∞·ªõc dialog (80% width, 90% height)
                dialog_width = int(parent_width * 0.8)
                dialog_height = int(parent_height * 0.9)

                # ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
                min_width = 1000
                min_height = 800

                dialog_width = max(dialog_width, min_width)
                dialog_height = max(dialog_height, min_height)

                # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc m√†n h√¨nh
                screen = self.parent().screen() if self.parent() else None
                if screen:
                    screen_geometry = screen.availableGeometry()
                    max_width = int(screen_geometry.width() * 0.95)
                    max_height = int(screen_geometry.height() * 0.95)

                    dialog_width = min(dialog_width, max_width)
                    dialog_height = min(dialog_height, max_height)

                # ƒê·∫∑t k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu v√† k√≠ch th∆∞·ªõc hi·ªán t·∫°i
                self.setMinimumSize(min_width, min_height)
                self.resize(dialog_width, dialog_height)

                # CƒÉn gi·ªØa dialog so v·ªõi parent
                self.center_on_parent()

                print(f"[DEBUG] Dialog size calculated: {dialog_width}x{dialog_height} "
                      f"(parent: {parent_width}x{parent_height})")

            else:
                # Fallback n·∫øu kh√¥ng c√≥ parent
                self.setMinimumSize(1000, 800)
                self.resize(1100, 850)
                print("[DEBUG] No parent window, using default size")

        except Exception as e:
            print(f"[ERROR] Error calculating dialog size: {e}")
            # Fallback v·ªÅ k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh
            self.setMinimumSize(1000, 800)
            self.resize(1100, 850)

    def center_on_parent(self):
        """CƒÉn gi·ªØa dialog so v·ªõi parent window"""
        try:
            if self.parent():
                parent_geometry = self.parent().geometry()
                dialog_geometry = self.geometry()

                # T√≠nh to√°n v·ªã tr√≠ cƒÉn gi·ªØa
                x = parent_geometry.x() + (parent_geometry.width() - dialog_geometry.width()) // 2
                y = parent_geometry.y() + (parent_geometry.height() - dialog_geometry.height()) // 2

                # ƒê·∫£m b·∫£o dialog kh√¥ng ra ngo√†i m√†n h√¨nh
                screen = self.parent().screen() if self.parent() else None
                if screen:
                    screen_geometry = screen.availableGeometry()
                    x = max(screen_geometry.x(), min(x, screen_geometry.x() + screen_geometry.width() - dialog_geometry.width()))
                    y = max(screen_geometry.y(), min(y, screen_geometry.y() + screen_geometry.height() - dialog_geometry.height()))

                self.move(x, y)
                print(f"[DEBUG] Dialog centered at: {x}, {y}")

        except Exception as e:
            print(f"[ERROR] Error centering dialog: {e}")

    def resizeEvent(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc"""
        super().resizeEvent(event)
        # C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω khi dialog resize n·∫øu c·∫ßn

    def showEvent(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán hi·ªÉn th·ªã dialog"""
        super().showEvent(event)
        # T√≠nh to√°n l·∫°i k√≠ch th∆∞·ªõc khi dialog ƒë∆∞·ª£c hi·ªÉn th·ªã
        self.calculate_and_set_size()

    def create_days_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t theo ng√†y"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Days-based settings group
        days_group = QGroupBox("üìÖ C√†i ƒê·∫∑t Ng∆∞·ª°ng Theo S·ªë Ng√†y C√≤n L·∫°i")
        days_group.setFont(QFont("Arial", 12, QFont.Bold))
        days_layout = QGridLayout(days_group)
        days_layout.setSpacing(10)

        # Critical days
        days_layout.addWidget(QLabel("üî¥ Kh·∫©n c·∫•p (ng√†y):"), 0, 0)
        self.critical_days_spin = QSpinBox()
        self.critical_days_spin.setRange(0, 30)
        self.critical_days_spin.setSuffix(" ng√†y")
        self.critical_days_spin.setStyleSheet("QSpinBox { padding: 5px; }")
        days_layout.addWidget(self.critical_days_spin, 0, 1)
        days_layout.addWidget(QLabel("H√†ng s·∫Ω ƒë∆∞·ª£c coi l√† kh·∫©n c·∫•p khi c√≤n √≠t h∆°n s·ªë ng√†y n√†y"), 0, 2)

        # Warning days
        days_layout.addWidget(QLabel("üü° S·∫Øp h·∫øt (ng√†y):"), 1, 0)
        self.warning_days_spin = QSpinBox()
        self.warning_days_spin.setRange(1, 60)
        self.warning_days_spin.setSuffix(" ng√†y")
        self.warning_days_spin.setStyleSheet("QSpinBox { padding: 5px; }")
        days_layout.addWidget(self.warning_days_spin, 1, 1)
        days_layout.addWidget(QLabel("H√†ng s·∫Ω ƒë∆∞·ª£c coi l√† s·∫Øp h·∫øt khi c√≤n √≠t h∆°n s·ªë ng√†y n√†y"), 1, 2)

        # Sufficient days
        days_layout.addWidget(QLabel("üü¢ ƒê·ªß h√†ng (ng√†y):"), 2, 0)
        self.sufficient_days_spin = QSpinBox()
        self.sufficient_days_spin.setRange(1, 90)
        self.sufficient_days_spin.setSuffix(" ng√†y")
        self.sufficient_days_spin.setStyleSheet("QSpinBox { padding: 5px; }")
        days_layout.addWidget(self.sufficient_days_spin, 2, 1)
        days_layout.addWidget(QLabel("H√†ng s·∫Ω ƒë∆∞·ª£c coi l√† ƒë·ªß khi c√≤n nhi·ªÅu h∆°n s·ªë ng√†y n√†y"), 2, 2)

        layout.addWidget(days_group)

        # Example
        example_label = QLabel("üí° V√≠ d·ª•: N·∫øu ƒë·∫∑t Kh·∫©n c·∫•p = 7, S·∫Øp h·∫øt = 14, ƒê·ªß h√†ng = 14\n"
                              "‚Üí <7 ng√†y: Kh·∫©n c·∫•p, 7-14 ng√†y: S·∫Øp h·∫øt, >14 ng√†y: ƒê·ªß h√†ng")
        example_label.setStyleSheet("""
            QLabel {
                background-color: #e3f2fd;
                border: 1px solid #2196f3;
                border-radius: 6px;
                padding: 10px;
                color: #1976d2;
            }
        """)
        layout.addWidget(example_label)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üìÖ Theo Ng√†y")

    def create_stock_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t theo t·ªìn kho"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Stock-based settings group
        stock_group = QGroupBox("üì¶ C√†i ƒê·∫∑t Ng∆∞·ª°ng Theo S·ªë L∆∞·ª£ng T·ªìn Kho")
        stock_group.setFont(QFont("Arial", 12, QFont.Bold))
        stock_layout = QGridLayout(stock_group)
        stock_layout.setSpacing(10)

        # Critical stock
        stock_layout.addWidget(QLabel("üî¥ Kh·∫©n c·∫•p (kg):"), 0, 0)
        self.critical_stock_spin = QDoubleSpinBox()
        self.critical_stock_spin.setRange(0, 10000)
        self.critical_stock_spin.setSuffix(" kg")
        self.critical_stock_spin.setDecimals(1)
        self.critical_stock_spin.setStyleSheet("QDoubleSpinBox { padding: 5px; }")
        stock_layout.addWidget(self.critical_stock_spin, 0, 1)
        stock_layout.addWidget(QLabel("H√†ng s·∫Ω ƒë∆∞·ª£c coi l√† kh·∫©n c·∫•p khi ‚â§ s·ªë l∆∞·ª£ng n√†y"), 0, 2)

        # Warning stock
        stock_layout.addWidget(QLabel("üü° S·∫Øp h·∫øt (kg):"), 1, 0)
        self.warning_stock_spin = QDoubleSpinBox()
        self.warning_stock_spin.setRange(0, 10000)
        self.warning_stock_spin.setSuffix(" kg")
        self.warning_stock_spin.setDecimals(1)
        self.warning_stock_spin.setStyleSheet("QDoubleSpinBox { padding: 5px; }")
        stock_layout.addWidget(self.warning_stock_spin, 1, 1)
        stock_layout.addWidget(QLabel("H√†ng s·∫Ω ƒë∆∞·ª£c coi l√† s·∫Øp h·∫øt khi ‚â§ s·ªë l∆∞·ª£ng n√†y"), 1, 2)

        # Sufficient stock
        stock_layout.addWidget(QLabel("üü¢ ƒê·ªß h√†ng (kg):"), 2, 0)
        self.sufficient_stock_spin = QDoubleSpinBox()
        self.sufficient_stock_spin.setRange(0, 10000)
        self.sufficient_stock_spin.setSuffix(" kg")
        self.sufficient_stock_spin.setDecimals(1)
        self.sufficient_stock_spin.setStyleSheet("QDoubleSpinBox { padding: 5px; }")
        stock_layout.addWidget(self.sufficient_stock_spin, 2, 1)
        stock_layout.addWidget(QLabel("H√†ng s·∫Ω ƒë∆∞·ª£c coi l√† ƒë·ªß khi > s·ªë l∆∞·ª£ng n√†y"), 2, 2)

        layout.addWidget(stock_group)

        # Example
        example_label = QLabel("üí° V√≠ d·ª•: N·∫øu ƒë·∫∑t Kh·∫©n c·∫•p = 0, S·∫Øp h·∫øt = 100, ƒê·ªß h√†ng = 500\n"
                              "‚Üí ‚â§0 kg: Kh·∫©n c·∫•p, ‚â§100 kg: S·∫Øp h·∫øt, >500 kg: ƒê·ªß h√†ng")
        example_label.setStyleSheet("""
            QLabel {
                background-color: #e8f5e9;
                border: 1px solid #4caf50;
                border-radius: 6px;
                padding: 10px;
                color: #2e7d32;
            }
        """)
        layout.addWidget(example_label)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üì¶ Theo T·ªìn Kho")

    def create_priority_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t ∆∞u ti√™n"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Priority settings group
        priority_group = QGroupBox("üéØ C√†i ƒê·∫∑t ∆Øu Ti√™n ƒê√°nh Gi√°")
        priority_group.setFont(QFont("Arial", 12, QFont.Bold))
        priority_layout = QVBoxLayout(priority_group)
        priority_layout.setSpacing(15)

        # Days-based priority
        self.use_days_checkbox = QCheckBox("üìÖ ∆Øu ti√™n ƒë√°nh gi√° theo s·ªë ng√†y c√≤n l·∫°i")
        self.use_days_checkbox.setFont(QFont("Arial", 11))
        self.use_days_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        priority_layout.addWidget(self.use_days_checkbox)

        days_desc = QLabel("   ‚Üí S·ª≠ d·ª•ng d·ªØ li·ªáu ti√™u th·ª• ƒë·ªÉ t√≠nh s·ªë ng√†y c√≤n l·∫°i v√† ƒë√°nh gi√° tr·∫°ng th√°i")
        days_desc.setStyleSheet("color: #666; margin-left: 20px;")
        priority_layout.addWidget(days_desc)

        # Stock-based priority
        self.use_stock_checkbox = QCheckBox("üì¶ S·ª≠ d·ª•ng ƒë√°nh gi√° theo s·ªë l∆∞·ª£ng t·ªìn kho")
        self.use_stock_checkbox.setFont(QFont("Arial", 11))
        self.use_stock_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        priority_layout.addWidget(self.use_stock_checkbox)

        stock_desc = QLabel("   ‚Üí S·ª≠ d·ª•ng s·ªë l∆∞·ª£ng t·ªìn kho hi·ªán t·∫°i ƒë·ªÉ ƒë√°nh gi√° tr·∫°ng th√°i")
        stock_desc.setStyleSheet("color: #666; margin-left: 20px;")
        priority_layout.addWidget(stock_desc)

        layout.addWidget(priority_group)

        # Logic explanation
        logic_group = QGroupBox("üîç Logic ƒê√°nh Gi√°")
        logic_group.setFont(QFont("Arial", 12, QFont.Bold))
        logic_layout = QVBoxLayout(logic_group)

        logic_text = QTextEdit()
        logic_text.setReadOnly(True)
        logic_text.setMaximumHeight(120)
        logic_text.setPlainText(
            "‚Ä¢ N·∫øu ch·ªçn '∆Øu ti√™n theo ng√†y': H·ªá th·ªëng s·∫Ω ∆∞u ti√™n s·ª≠ d·ª•ng s·ªë ng√†y c√≤n l·∫°i ƒë·ªÉ ƒë√°nh gi√°\n"
            "‚Ä¢ N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ng√†y ho·∫∑c ch·ªçn 'Theo t·ªìn kho': S·ª≠ d·ª•ng s·ªë l∆∞·ª£ng t·ªìn kho\n"
            "‚Ä¢ C√≥ th·ªÉ ch·ªçn c·∫£ hai ƒë·ªÉ c√≥ ƒë√°nh gi√° to√†n di·ªán\n"
            "‚Ä¢ Khuy·∫øn ngh·ªã: Ch·ªçn '∆Øu ti√™n theo ng√†y' ƒë·ªÉ c√≥ ƒë√°nh gi√° ch√≠nh x√°c h∆°n"
        )
        logic_text.setStyleSheet("""
            QTextEdit {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 10px;
                color: #333;
            }
        """)
        logic_layout.addWidget(logic_text)
        layout.addWidget(logic_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üéØ ∆Øu Ti√™n")

    def create_display_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t hi·ªÉn th·ªã"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Display unit settings
        unit_group = QGroupBox("üìä ƒê∆°n V·ªã Hi·ªÉn Th·ªã")
        unit_group.setFont(QFont("Arial", 12, QFont.Bold))
        unit_layout = QGridLayout(unit_group)
        unit_layout.setSpacing(10)

        # Display unit combo
        unit_layout.addWidget(QLabel("ƒê∆°n v·ªã ∆∞u ti√™n:"), 0, 0)
        self.display_unit_combo = QComboBox()
        self.display_unit_combo.addItem("C·∫£ ng√†y v√† kg", "both")
        self.display_unit_combo.addItem("Ch·ªâ ng√†y", "days")
        self.display_unit_combo.addItem("Ch·ªâ kg", "stock")
        self.display_unit_combo.setStyleSheet("QComboBox { padding: 5px; }")
        unit_layout.addWidget(self.display_unit_combo, 0, 1)

        # Show options
        self.show_days_checkbox = QCheckBox("üìÖ Hi·ªÉn th·ªã s·ªë ng√†y c√≤n l·∫°i trong b·∫£ng")
        self.show_days_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        unit_layout.addWidget(self.show_days_checkbox, 1, 0, 1, 2)

        self.show_stock_checkbox = QCheckBox("üì¶ Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng t·ªìn kho trong b·∫£ng")
        self.show_stock_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        unit_layout.addWidget(self.show_stock_checkbox, 2, 0, 1, 2)

        layout.addWidget(unit_group)

        # Info
        info_label = QLabel("üí° C√†i ƒë·∫∑t n√†y ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch hi·ªÉn th·ªã th√¥ng tin trong b·∫£ng t·ªìn kho")
        info_label.setStyleSheet("""
            QLabel {
                background-color: #e3f2fd;
                border: 1px solid #2196f3;
                border-radius: 6px;
                padding: 10px;
                color: #1976d2;
            }
        """)
        layout.addWidget(info_label)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üìä Hi·ªÉn Th·ªã")

    def create_sound_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t √¢m thanh"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Sound settings
        sound_group = QGroupBox("üîä C√†i ƒê·∫∑t √Çm Thanh C·∫£nh B√°o")
        sound_group.setFont(QFont("Arial", 12, QFont.Bold))
        sound_layout = QGridLayout(sound_group)
        sound_layout.setSpacing(10)

        # Enable sound
        self.sound_enabled_checkbox = QCheckBox("üîä B·∫≠t √¢m thanh c·∫£nh b√°o")
        self.sound_enabled_checkbox.setFont(QFont("Arial", 11, QFont.Bold))
        self.sound_enabled_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        sound_layout.addWidget(self.sound_enabled_checkbox, 0, 0, 1, 2)

        # Critical sound
        self.sound_critical_checkbox = QCheckBox("üî¥ √Çm thanh cho c·∫£nh b√°o kh·∫©n c·∫•p")
        self.sound_critical_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        sound_layout.addWidget(self.sound_critical_checkbox, 1, 0, 1, 2)

        # Warning sound
        self.sound_warning_checkbox = QCheckBox("üü° √Çm thanh cho c·∫£nh b√°o s·∫Øp h·∫øt")
        self.sound_warning_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        sound_layout.addWidget(self.sound_warning_checkbox, 2, 0, 1, 2)

        # Volume
        sound_layout.addWidget(QLabel("üîä √Çm l∆∞·ª£ng:"), 3, 0)
        self.volume_slider = QSlider(Qt.Horizontal)
        self.volume_slider.setRange(0, 100)
        self.volume_slider.setValue(50)
        self.volume_slider.setStyleSheet("""
            QSlider::groove:horizontal {
                border: 1px solid #999999;
                height: 8px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #B1B1B1, stop:1 #c4c4c4);
                margin: 2px 0;
                border-radius: 4px;
            }
            QSlider::handle:horizontal {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #b4b4b4, stop:1 #8f8f8f);
                border: 1px solid #5c5c5c;
                width: 18px;
                margin: -2px 0;
                border-radius: 9px;
            }
        """)
        sound_layout.addWidget(self.volume_slider, 3, 1)

        self.volume_label = QLabel("50%")
        self.volume_label.setMinimumWidth(40)
        sound_layout.addWidget(self.volume_label, 3, 2)

        # Connect volume slider
        self.volume_slider.valueChanged.connect(lambda v: self.volume_label.setText(f"{v}%"))

        layout.addWidget(sound_group)

        # Test button
        test_btn = QPushButton("üéµ Test √Çm Thanh")
        test_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196f3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #1976d2; }
        """)
        test_btn.clicked.connect(self.test_sound)
        layout.addWidget(test_btn)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üîä √Çm Thanh")

    def create_automation_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t t·ª± ƒë·ªông"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Auto check settings
        check_group = QGroupBox("‚è∞ Ki·ªÉm Tra T·ª± ƒê·ªông")
        check_group.setFont(QFont("Arial", 12, QFont.Bold))
        check_layout = QGridLayout(check_group)
        check_layout.setSpacing(10)

        # Enable auto check
        self.auto_check_checkbox = QCheckBox("‚è∞ B·∫≠t ki·ªÉm tra t·ªìn kho t·ª± ƒë·ªông")
        self.auto_check_checkbox.setFont(QFont("Arial", 11, QFont.Bold))
        self.auto_check_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        check_layout.addWidget(self.auto_check_checkbox, 0, 0, 1, 2)

        # Check frequency
        check_layout.addWidget(QLabel("T·∫ßn su·∫•t:"), 1, 0)
        self.check_frequency_combo = QComboBox()
        self.check_frequency_combo.addItem("Ch·ªâ khi kh·ªüi ƒë·ªông", "startup_only")
        self.check_frequency_combo.addItem("M·ªói gi·ªù", "hourly")
        self.check_frequency_combo.addItem("M·ªói ng√†y", "daily")
        self.check_frequency_combo.setStyleSheet("QComboBox { padding: 5px; }")
        check_layout.addWidget(self.check_frequency_combo, 1, 1)

        # Check interval
        check_layout.addWidget(QLabel("Kho·∫£ng c√°ch (gi·ªù):"), 2, 0)
        self.check_interval_spin = QSpinBox()
        self.check_interval_spin.setRange(1, 24)
        self.check_interval_spin.setValue(1)
        self.check_interval_spin.setSuffix(" gi·ªù")
        self.check_interval_spin.setStyleSheet("QSpinBox { padding: 5px; }")
        check_layout.addWidget(self.check_interval_spin, 2, 1)

        layout.addWidget(check_group)

        # Popup settings
        popup_group = QGroupBox("üîî C√†i ƒê·∫∑t Popup")
        popup_group.setFont(QFont("Arial", 12, QFont.Bold))
        popup_layout = QVBoxLayout(popup_group)
        popup_layout.setSpacing(10)

        self.popup_enabled_checkbox = QCheckBox("üîî B·∫≠t popup c·∫£nh b√°o")
        self.popup_enabled_checkbox.setFont(QFont("Arial", 11, QFont.Bold))
        self.popup_enabled_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        popup_layout.addWidget(self.popup_enabled_checkbox)

        self.popup_startup_checkbox = QCheckBox("üöÄ Hi·ªÉn th·ªã popup khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng")
        self.popup_startup_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        popup_layout.addWidget(self.popup_startup_checkbox)

        self.popup_critical_checkbox = QCheckBox("üî¥ Popup cho c·∫£nh b√°o kh·∫©n c·∫•p")
        self.popup_critical_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        popup_layout.addWidget(self.popup_critical_checkbox)

        self.popup_warning_checkbox = QCheckBox("üü° Popup cho c·∫£nh b√°o s·∫Øp h·∫øt")
        self.popup_warning_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        popup_layout.addWidget(self.popup_warning_checkbox)

        layout.addWidget(popup_group)

        # Auto report settings
        report_group = QGroupBox("üìä B√°o C√°o T·ª± ƒê·ªông")
        report_group.setFont(QFont("Arial", 12, QFont.Bold))
        report_layout = QGridLayout(report_group)
        report_layout.setSpacing(10)

        # Enable auto report
        self.auto_report_checkbox = QCheckBox("üìä B·∫≠t xu·∫•t b√°o c√°o t·ª± ƒë·ªông")
        self.auto_report_checkbox.setFont(QFont("Arial", 11, QFont.Bold))
        self.auto_report_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        report_layout.addWidget(self.auto_report_checkbox, 0, 0, 1, 2)

        # Report frequency
        report_layout.addWidget(QLabel("T·∫ßn su·∫•t:"), 1, 0)
        self.report_frequency_combo = QComboBox()
        self.report_frequency_combo.addItem("H√†ng ng√†y", "daily")
        self.report_frequency_combo.addItem("H√†ng tu·∫ßn", "weekly")
        self.report_frequency_combo.addItem("H√†ng th√°ng", "monthly")
        self.report_frequency_combo.setStyleSheet("QComboBox { padding: 5px; }")
        report_layout.addWidget(self.report_frequency_combo, 1, 1)

        # Report time
        report_layout.addWidget(QLabel("Th·ªùi gian:"), 2, 0)
        self.report_time_edit = QTimeEdit()
        self.report_time_edit.setTime(QTime(8, 0))
        self.report_time_edit.setDisplayFormat("HH:mm")
        self.report_time_edit.setStyleSheet("QTimeEdit { padding: 5px; }")
        report_layout.addWidget(self.report_time_edit, 2, 1)

        # Report path
        report_layout.addWidget(QLabel("Th∆∞ m·ª•c l∆∞u:"), 3, 0)
        self.report_path_edit = QLineEdit()
        self.report_path_edit.setText("reports/alerts")
        self.report_path_edit.setStyleSheet("QLineEdit { padding: 5px; }")
        report_layout.addWidget(self.report_path_edit, 3, 1)

        layout.addWidget(report_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "‚öôÔ∏è T·ª± ƒê·ªông")

    def create_color_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t m√†u s·∫Øc"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Color settings
        color_group = QGroupBox("üé® C√†i ƒê·∫∑t M√†u S·∫Øc")
        color_group.setFont(QFont("Arial", 12, QFont.Bold))
        color_layout = QGridLayout(color_group)
        color_layout.setSpacing(10)

        # Enable custom colors
        self.use_custom_colors_checkbox = QCheckBox("üé® S·ª≠ d·ª•ng m√†u s·∫Øc t√πy ch·ªânh")
        self.use_custom_colors_checkbox.setFont(QFont("Arial", 11, QFont.Bold))
        self.use_custom_colors_checkbox.setStyleSheet("QCheckBox { padding: 5px; }")
        color_layout.addWidget(self.use_custom_colors_checkbox, 0, 0, 1, 3)

        # Color buttons
        self.color_buttons = {}
        color_settings = [
            ("critical", "üî¥ Kh·∫©n c·∫•p", "#f44336"),
            ("warning", "üü° S·∫Øp h·∫øt", "#ff9800"),
            ("sufficient", "üü¢ ƒê·ªß h√†ng", "#4caf50"),
            ("no_data", "‚ö™ Kh√¥ng c√≥ d·ªØ li·ªáu", "#9e9e9e")
        ]

        for i, (key, label, default_color) in enumerate(color_settings):
            color_layout.addWidget(QLabel(label), i + 1, 0)

            color_btn = QPushButton()
            color_btn.setFixedSize(50, 30)
            color_btn.setStyleSheet(f"background-color: {default_color}; border: 2px solid #ccc; border-radius: 4px;")
            color_btn.clicked.connect(lambda checked, k=key: self.choose_color(k))
            color_layout.addWidget(color_btn, i + 1, 1)

            self.color_buttons[key] = color_btn

            # Reset button
            reset_btn = QPushButton("üîÑ M·∫∑c ƒë·ªãnh")
            reset_btn.setStyleSheet("""
                QPushButton {
                    background-color: #9e9e9e;
                    color: white;
                    border: none;
                    padding: 5px 10px;
                    border-radius: 4px;
                }
                QPushButton:hover { background-color: #757575; }
            """)
            reset_btn.clicked.connect(lambda checked, k=key, c=default_color: self.reset_color(k, c))
            color_layout.addWidget(reset_btn, i + 1, 2)

        layout.addWidget(color_group)

        # Preview
        preview_group = QGroupBox("üëÅÔ∏è Xem Tr∆∞·ªõc")
        preview_group.setFont(QFont("Arial", 12, QFont.Bold))
        preview_layout = QVBoxLayout(preview_group)

        self.color_preview_label = QLabel("Xem tr∆∞·ªõc m√†u s·∫Øc s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y")
        self.color_preview_label.setStyleSheet("""
            QLabel {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 20px;
                text-align: center;
            }
        """)
        preview_layout.addWidget(self.color_preview_label)

        layout.addWidget(preview_group)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üé® M√†u S·∫Øc")

    def create_individual_threshold_tab(self):
        """T·∫°o tab ng∆∞·ª°ng ri√™ng bi·ªát v·ªõi layout c·∫£i thi·ªán"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)

        # Header description v·ªõi styling c·∫£i thi·ªán
        desc = QLabel("üéØ C√†i ƒë·∫∑t ng∆∞·ª°ng c·∫£nh b√°o ri√™ng bi·ªát cho t·ª´ng nguy√™n li·ªáu\n"
                     "Ng∆∞·ª°ng ri√™ng bi·ªát s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n h∆°n ng∆∞·ª°ng chung v√† √°p d·ª•ng cho t·ª´ng th√†nh ph·∫ßn c·ª• th·ªÉ.")
        desc.setWordWrap(True)
        desc.setStyleSheet("""
            QLabel {
                background-color: #fff3cd;
                border: 2px solid #ffeaa7;
                border-radius: 8px;
                padding: 15px;
                color: #856404;
                font-weight: bold;
                font-size: 11px;
                line-height: 1.4;
            }
        """)
        layout.addWidget(desc)

        # Control panel
        self.create_individual_control_panel(layout)

        # Table
        self.create_individual_table(layout)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üéØ Ng∆∞·ª°ng Ri√™ng Bi·ªát")

    def create_individual_control_panel(self, layout):
        """T·∫°o panel ƒëi·ªÅu khi·ªÉn cho ng∆∞·ª°ng ri√™ng bi·ªát v·ªõi layout c·∫£i thi·ªán"""
        control_group = QGroupBox("üîß Th√™m/S·ª≠a Ng∆∞·ª°ng Ri√™ng Bi·ªát")
        control_group.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout = QGridLayout(control_group)
        control_layout.setSpacing(15)
        control_layout.setContentsMargins(20, 20, 20, 20)

        # Ingredient selection v·ªõi label r√µ r√†ng v√† font size l·ªõn h∆°n
        ingredient_label = QLabel("üì¶ Ch·ªçn th√†nh ph·∫ßn:")
        ingredient_label.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout.addWidget(ingredient_label, 0, 0)

        self.individual_ingredient_combo = QComboBox()
        self.individual_ingredient_combo.setEditable(True)
        self.individual_ingredient_combo.setMinimumWidth(250)
        self.individual_ingredient_combo.setMinimumHeight(40)
        self.individual_ingredient_combo.setStyleSheet("""
            QComboBox {
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QComboBox:focus { border-color: #4CAF50; }
            QComboBox::drop-down {
                width: 30px;
                border: none;
            }
            QComboBox::down-arrow {
                width: 12px;
                height: 12px;
            }
        """)
        control_layout.addWidget(self.individual_ingredient_combo, 0, 1, 1, 3)

        # Ng∆∞·ª°ng theo ng√†y v·ªõi font size l·ªõn h∆°n
        days_label = QLabel("üìÖ Ng∆∞·ª°ng theo ng√†y:")
        days_label.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout.addWidget(days_label, 1, 0)

        # Critical days v·ªõi k√≠ch th∆∞·ªõc c·∫£i thi·ªán
        critical_days_label = QLabel("üî¥ Kh·∫©n c·∫•p:")
        critical_days_label.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout.addWidget(critical_days_label, 1, 1)
        self.individual_critical_days_spin = QSpinBox()
        self.individual_critical_days_spin.setRange(0, 30)
        self.individual_critical_days_spin.setValue(7)
        self.individual_critical_days_spin.setSuffix(" ng√†y")
        self.individual_critical_days_spin.setMinimumWidth(130)
        self.individual_critical_days_spin.setMinimumHeight(40)
        self.individual_critical_days_spin.setStyleSheet("""
            QSpinBox {
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QSpinBox:focus { border-color: #f44336; }
            QSpinBox::up-button, QSpinBox::down-button {
                width: 20px;
                height: 15px;
            }
        """)
        control_layout.addWidget(self.individual_critical_days_spin, 2, 1)

        # Warning days v·ªõi k√≠ch th∆∞·ªõc c·∫£i thi·ªán
        warning_days_label = QLabel("üü° S·∫Øp h·∫øt:")
        warning_days_label.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout.addWidget(warning_days_label, 1, 2)
        self.individual_warning_days_spin = QSpinBox()
        self.individual_warning_days_spin.setRange(1, 60)
        self.individual_warning_days_spin.setValue(14)
        self.individual_warning_days_spin.setSuffix(" ng√†y")
        self.individual_warning_days_spin.setMinimumWidth(130)
        self.individual_warning_days_spin.setMinimumHeight(40)
        self.individual_warning_days_spin.setStyleSheet("""
            QSpinBox {
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QSpinBox:focus { border-color: #ff9800; }
            QSpinBox::up-button, QSpinBox::down-button {
                width: 20px;
                height: 15px;
            }
        """)
        control_layout.addWidget(self.individual_warning_days_spin, 2, 2)

        # Ng∆∞·ª°ng theo t·ªìn kho v·ªõi font size l·ªõn h∆°n
        stock_label = QLabel("üì¶ Ng∆∞·ª°ng theo t·ªìn kho:")
        stock_label.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout.addWidget(stock_label, 3, 0)

        # Critical stock v·ªõi k√≠ch th∆∞·ªõc c·∫£i thi·ªán
        critical_stock_label = QLabel("üî¥ Kh·∫©n c·∫•p:")
        critical_stock_label.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout.addWidget(critical_stock_label, 3, 1)
        self.individual_critical_stock_spin = QDoubleSpinBox()
        self.individual_critical_stock_spin.setRange(0, 10000)
        self.individual_critical_stock_spin.setValue(0)
        self.individual_critical_stock_spin.setSuffix(" kg")
        self.individual_critical_stock_spin.setDecimals(1)
        self.individual_critical_stock_spin.setMinimumWidth(130)
        self.individual_critical_stock_spin.setMinimumHeight(40)
        self.individual_critical_stock_spin.setStyleSheet("""
            QDoubleSpinBox {
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QDoubleSpinBox:focus { border-color: #f44336; }
            QDoubleSpinBox::up-button, QDoubleSpinBox::down-button {
                width: 20px;
                height: 15px;
            }
        """)
        control_layout.addWidget(self.individual_critical_stock_spin, 4, 1)

        # Warning stock v·ªõi k√≠ch th∆∞·ªõc c·∫£i thi·ªán
        warning_stock_label = QLabel("üü° S·∫Øp h·∫øt:")
        warning_stock_label.setFont(QFont("Arial", 12, QFont.Bold))
        control_layout.addWidget(warning_stock_label, 3, 2)
        self.individual_warning_stock_spin = QDoubleSpinBox()
        self.individual_warning_stock_spin.setRange(0, 10000)
        self.individual_warning_stock_spin.setValue(100)
        self.individual_warning_stock_spin.setSuffix(" kg")
        self.individual_warning_stock_spin.setDecimals(1)
        self.individual_warning_stock_spin.setMinimumWidth(130)
        self.individual_warning_stock_spin.setMinimumHeight(40)
        self.individual_warning_stock_spin.setStyleSheet("""
            QDoubleSpinBox {
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QDoubleSpinBox:focus { border-color: #ff9800; }
            QDoubleSpinBox::up-button, QDoubleSpinBox::down-button {
                width: 20px;
                height: 15px;
            }
        """)
        control_layout.addWidget(self.individual_warning_stock_spin, 4, 2)

        # Action buttons v·ªõi spacing c·∫£i thi·ªán
        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)
        button_layout.setContentsMargins(0, 20, 0, 0)

        add_btn = QPushButton("‚ûï Th√™m/C·∫≠p Nh·∫≠t")
        add_btn.setMinimumHeight(45)
        add_btn.setMinimumWidth(160)
        add_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 15px 25px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed { background-color: #3d8b40; }
        """)
        add_btn.clicked.connect(self.add_or_update_individual_threshold)
        button_layout.addWidget(add_btn)

        remove_btn = QPushButton("üóëÔ∏è X√≥a")
        remove_btn.setMinimumHeight(45)
        remove_btn.setMinimumWidth(120)
        remove_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 15px 25px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:pressed { background-color: #c62828; }
        """)
        remove_btn.clicked.connect(self.remove_individual_threshold)
        button_layout.addWidget(remove_btn)

        clear_all_btn = QPushButton("üóëÔ∏è X√≥a T·∫•t C·∫£")
        clear_all_btn.setMinimumHeight(45)
        clear_all_btn.setMinimumWidth(140)
        clear_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #9e9e9e;
                color: white;
                border: none;
                padding: 15px 25px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #757575;
            }
            QPushButton:pressed { background-color: #616161; }
        """)
        clear_all_btn.clicked.connect(self.clear_all_individual_thresholds)
        button_layout.addWidget(clear_all_btn)

        button_layout.addStretch()
        control_layout.addLayout(button_layout, 5, 0, 1, 4)

        layout.addWidget(control_group)

    def create_individual_table(self, layout):
        """T·∫°o b·∫£ng hi·ªÉn th·ªã ng∆∞·ª°ng ri√™ng bi·ªát v·ªõi layout c·∫£i thi·ªán"""
        table_group = QGroupBox("üìä Danh S√°ch Ng∆∞·ª°ng Ri√™ng Bi·ªát")
        table_group.setFont(QFont("Arial", 12, QFont.Bold))
        table_layout = QVBoxLayout(table_group)
        table_layout.setContentsMargins(15, 15, 15, 15)

        self.individual_table = QTableWidget()
        self.individual_table.setColumnCount(6)
        self.individual_table.setHorizontalHeaderLabels([
            "Th√†nh ph·∫ßn", "üî¥ Kh·∫©n c·∫•p\n(ng√†y)", "üü° S·∫Øp h·∫øt\n(ng√†y)",
            "üî¥ Kh·∫©n c·∫•p\n(kg)", "üü° S·∫Øp h·∫øt\n(kg)", "Tr·∫°ng th√°i\nhi·ªán t·∫°i"
        ])

        # Table styling v·ªõi font size v√† k√≠ch th∆∞·ªõc c·∫£i thi·ªán
        self.individual_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #e0e0e0;
                selection-background-color: #e3f2fd;
                alternate-background-color: #fafafa;
                background-color: white;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                font-size: 13px;
                font-weight: 500;
            }
            QHeaderView::section {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #FF9800, stop:1 #F57C00);
                color: white;
                padding: 15px 10px;
                border: 1px solid #F57C00;
                font-weight: bold;
                font-size: 12px;
                text-align: center;
            }
            QTableWidget::item {
                padding: 15px 10px;
                border-bottom: 1px solid #f0f0f0;
                text-align: center;
                font-size: 13px;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
                font-weight: bold;
            }
        """)

        # C·∫£i thi·ªán column resize v·ªõi k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh
        header = self.individual_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # Ingredient name - stretch
        header.setSectionResizeMode(1, QHeaderView.Fixed)    # Critical days - fixed
        header.setSectionResizeMode(2, QHeaderView.Fixed)    # Warning days - fixed
        header.setSectionResizeMode(3, QHeaderView.Fixed)    # Critical stock - fixed
        header.setSectionResizeMode(4, QHeaderView.Fixed)    # Warning stock - fixed
        header.setSectionResizeMode(5, QHeaderView.Fixed)    # Status - fixed

        # ƒê·∫∑t k√≠ch th∆∞·ªõc c·ªôt c·ªë ƒë·ªãnh v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n ƒë·ªÉ text hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
        self.individual_table.setColumnWidth(1, 120)  # Critical days
        self.individual_table.setColumnWidth(2, 120)  # Warning days
        self.individual_table.setColumnWidth(3, 120)  # Critical stock
        self.individual_table.setColumnWidth(4, 120)  # Warning stock
        self.individual_table.setColumnWidth(5, 140)  # Status

        # C·∫£i thi·ªán row height ƒë·ªÉ text hi·ªÉn th·ªã t·ªët h∆°n v·ªõi font size l·ªõn
        self.individual_table.verticalHeader().setDefaultSectionSize(50)
        self.individual_table.verticalHeader().setVisible(False)

        # ƒê·∫∑t minimum height cho table l·ªõn h∆°n
        self.individual_table.setMinimumHeight(250)

        self.individual_table.setAlternatingRowColors(True)
        self.individual_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.individual_table.itemSelectionChanged.connect(self.on_individual_table_selection_changed)

        table_layout.addWidget(self.individual_table)
        layout.addWidget(table_group)

    def create_current_settings_display(self, layout):
        """T·∫°o hi·ªÉn th·ªã c√†i ƒë·∫∑t hi·ªán t·∫°i v·ªõi styling c·∫£i thi·ªán"""
        self.current_settings_label = QLabel()
        self.current_settings_label.setWordWrap(True)
        self.current_settings_label.setStyleSheet("""
            QLabel {
                background-color: #f8f9fa;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
                color: #495057;
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 11px;
                line-height: 1.4;
            }
        """)
        layout.addWidget(self.current_settings_label)

    def create_buttons(self, layout):
        """T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn v·ªõi styling c·∫£i thi·ªán"""
        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)
        button_layout.setContentsMargins(0, 20, 0, 0)

        # Reset button
        reset_btn = QPushButton("üîÑ ƒê·∫∑t L·∫°i M·∫∑c ƒê·ªãnh")
        reset_btn.setMinimumHeight(45)
        reset_btn.setMinimumWidth(160)
        reset_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
            QPushButton:pressed { background-color: #545b62; }
        """)
        reset_btn.clicked.connect(self.reset_to_defaults)
        button_layout.addWidget(reset_btn)

        button_layout.addStretch()

        # Cancel button
        cancel_btn = QPushButton("‚ùå H·ªßy")
        cancel_btn.setMinimumHeight(45)
        cancel_btn.setMinimumWidth(120)
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
            QPushButton:pressed { background-color: #bd2130; }
        """)
        cancel_btn.clicked.connect(self.reject)
        button_layout.addWidget(cancel_btn)

        # Save button
        save_btn = QPushButton("üíæ L∆∞u C√†i ƒê·∫∑t")
        save_btn.setMinimumHeight(45)
        save_btn.setMinimumWidth(140)
        save_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
            QPushButton:pressed { background-color: #1e7e34; }
        """)
        save_btn.clicked.connect(self.save_settings)
        button_layout.addWidget(save_btn)

        layout.addLayout(button_layout)

    def load_current_settings(self):
        """T·∫£i c√†i ƒë·∫∑t hi·ªán t·∫°i v√†o giao di·ªán"""
        thresholds = self.threshold_manager.get_thresholds()

        # Load days settings
        self.critical_days_spin.setValue(thresholds["critical_days"])
        self.warning_days_spin.setValue(thresholds["warning_days"])
        self.sufficient_days_spin.setValue(thresholds["sufficient_days"])

        # Load stock settings
        self.critical_stock_spin.setValue(thresholds["critical_stock"])
        self.warning_stock_spin.setValue(thresholds["warning_stock"])
        self.sufficient_stock_spin.setValue(thresholds["sufficient_stock"])

        # Load priority settings
        self.use_days_checkbox.setChecked(thresholds["use_days_based"])
        self.use_stock_checkbox.setChecked(thresholds["use_stock_based"])

        # Load advanced settings
        self.load_advanced_settings()

        # Load individual threshold settings
        self.load_individual_ingredients()
        self.load_individual_threshold_settings()

        # Update display
        self.update_current_settings_display()

    def load_advanced_settings(self):
        """T·∫£i c√°c c√†i ƒë·∫∑t n√¢ng cao"""
        # Display settings
        display_settings = self.threshold_manager.get_display_settings()
        self.set_combo_by_data(self.display_unit_combo, display_settings["display_unit"])
        self.show_days_checkbox.setChecked(display_settings["show_days_in_table"])
        self.show_stock_checkbox.setChecked(display_settings["show_stock_in_table"])

        # Sound settings
        sound_settings = self.threshold_manager.get_sound_settings()
        self.sound_enabled_checkbox.setChecked(sound_settings["sound_enabled"])
        self.sound_critical_checkbox.setChecked(sound_settings["sound_critical"])
        self.sound_warning_checkbox.setChecked(sound_settings["sound_warning"])
        self.volume_slider.setValue(sound_settings["sound_volume"])

        # Auto check settings
        auto_check_settings = self.threshold_manager.get_auto_check_settings()
        self.auto_check_checkbox.setChecked(auto_check_settings["auto_check_enabled"])
        self.set_combo_by_data(self.check_frequency_combo, auto_check_settings["check_frequency"])
        self.check_interval_spin.setValue(auto_check_settings["check_interval_hours"])

        # Popup settings
        popup_settings = self.threshold_manager.get_popup_settings()
        self.popup_enabled_checkbox.setChecked(popup_settings["popup_enabled"])
        self.popup_startup_checkbox.setChecked(popup_settings["popup_on_startup"])
        self.popup_critical_checkbox.setChecked(popup_settings["popup_on_critical"])
        self.popup_warning_checkbox.setChecked(popup_settings["popup_on_warning"])

        # Auto report settings
        auto_report_settings = self.threshold_manager.get_auto_report_settings()
        self.auto_report_checkbox.setChecked(auto_report_settings["auto_report_enabled"])
        self.set_combo_by_data(self.report_frequency_combo, auto_report_settings["report_frequency"])

        # Parse time string
        time_str = auto_report_settings["report_time"]
        try:
            hours, minutes = map(int, time_str.split(":"))
            self.report_time_edit.setTime(QTime(hours, minutes))
        except:
            self.report_time_edit.setTime(QTime(8, 0))

        self.report_path_edit.setText(auto_report_settings["report_path"])

        # Color settings
        color_settings = self.threshold_manager.get_color_settings()
        self.use_custom_colors_checkbox.setChecked(color_settings["use_custom_colors"])

        # Update color buttons
        color_map = {
            "critical": color_settings["color_critical"],
            "warning": color_settings["color_warning"],
            "sufficient": color_settings["color_sufficient"],
            "no_data": color_settings["color_no_data"]
        }

        for key, color in color_map.items():
            if key in self.color_buttons:
                self.color_buttons[key].setStyleSheet(
                    f"background-color: {color}; border: 2px solid #ccc; border-radius: 4px;"
                )

        self.update_color_preview()

    def load_individual_ingredients(self):
        """T·∫£i danh s√°ch nguy√™n li·ªáu cho tab ng∆∞·ª°ng ri√™ng bi·ªát"""
        try:
            # Get all ingredients from inventory
            inventory = self.inventory_manager.get_inventory()
            ingredients = sorted(inventory.keys())

            self.individual_ingredient_combo.clear()
            self.individual_ingredient_combo.addItems(ingredients)

        except Exception as e:
            print(f"[ERROR] L·ªói khi t·∫£i danh s√°ch nguy√™n li·ªáu: {e}")

    def load_individual_threshold_settings(self):
        """T·∫£i c√†i ƒë·∫∑t ng∆∞·ª°ng ri√™ng bi·ªát v√†o b·∫£ng"""
        try:
            individual_thresholds = self.threshold_manager.get_individual_thresholds()

            self.individual_table.setRowCount(len(individual_thresholds))

            # Get current inventory status for display
            avg_daily_usage = self.inventory_manager.analyze_consumption_patterns(7)
            days_remaining = self.inventory_manager.calculate_days_until_empty(avg_daily_usage)
            inventory = self.inventory_manager.get_inventory()

            row = 0
            for ingredient, thresholds in individual_thresholds.items():
                # Ingredient name
                self.individual_table.setItem(row, 0, QTableWidgetItem(ingredient))

                # Critical days
                critical_days = thresholds.get('critical_days', 'Chung')
                self.individual_table.setItem(row, 1, QTableWidgetItem(str(critical_days)))

                # Warning days
                warning_days = thresholds.get('warning_days', 'Chung')
                self.individual_table.setItem(row, 2, QTableWidgetItem(str(warning_days)))

                # Critical stock
                critical_stock = thresholds.get('critical_stock', 'Chung')
                self.individual_table.setItem(row, 3, QTableWidgetItem(str(critical_stock)))

                # Warning stock
                warning_stock = thresholds.get('warning_stock', 'Chung')
                self.individual_table.setItem(row, 4, QTableWidgetItem(str(warning_stock)))

                # Current status
                days = days_remaining.get(ingredient, float('inf'))
                stock = inventory.get(ingredient, 0)
                status_text, color_info = self.threshold_manager.get_inventory_status(days, stock, ingredient)

                status_item = QTableWidgetItem(status_text)
                if color_info == "red":
                    status_item.setBackground(QColor("#ffebee"))
                    status_item.setForeground(QColor("#c62828"))
                elif color_info == "yellow":
                    status_item.setBackground(QColor("#fff8e1"))
                    status_item.setForeground(QColor("#f57c00"))
                elif color_info == "green":
                    status_item.setBackground(QColor("#e8f5e9"))
                    status_item.setForeground(QColor("#2e7d32"))

                self.individual_table.setItem(row, 5, status_item)

                row += 1

        except Exception as e:
            print(f"[ERROR] L·ªói khi t·∫£i c√†i ƒë·∫∑t ng∆∞·ª°ng ri√™ng bi·ªát: {e}")

    def on_individual_table_selection_changed(self):
        """X·ª≠ l√Ω khi ch·ªçn h√†ng trong b·∫£ng ng∆∞·ª°ng ri√™ng bi·ªát"""
        current_row = self.individual_table.currentRow()
        if current_row >= 0:
            # Load selected ingredient data to form
            ingredient = self.individual_table.item(current_row, 0).text()
            self.individual_ingredient_combo.setCurrentText(ingredient)

            # Load thresholds
            thresholds = self.threshold_manager.get_ingredient_thresholds(ingredient)
            self.individual_critical_days_spin.setValue(thresholds.get('critical_days', 7))
            self.individual_warning_days_spin.setValue(thresholds.get('warning_days', 14))
            self.individual_critical_stock_spin.setValue(thresholds.get('critical_stock', 0))
            self.individual_warning_stock_spin.setValue(thresholds.get('warning_stock', 100))

    def add_or_update_individual_threshold(self):
        """Th√™m ho·∫∑c c·∫≠p nh·∫≠t ng∆∞·ª°ng ri√™ng bi·ªát"""
        ingredient = self.individual_ingredient_combo.currentText().strip()
        if not ingredient:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p t√™n th√†nh ph·∫ßn!")
            return

        # Validate values
        critical_days = self.individual_critical_days_spin.value()
        warning_days = self.individual_warning_days_spin.value()

        if critical_days >= warning_days:
            QMessageBox.warning(self, "L·ªói",
                              f"Ng∆∞·ª°ng kh·∫©n c·∫•p ({critical_days}) ph·∫£i nh·ªè h∆°n ng∆∞·ª°ng c·∫£nh b√°o ({warning_days})!")
            return

        # Set individual thresholds
        success = True
        success &= self.threshold_manager.set_individual_threshold(ingredient, 'critical_days', critical_days)
        success &= self.threshold_manager.set_individual_threshold(ingredient, 'warning_days', warning_days)
        success &= self.threshold_manager.set_individual_threshold(ingredient, 'critical_stock', self.individual_critical_stock_spin.value())
        success &= self.threshold_manager.set_individual_threshold(ingredient, 'warning_stock', self.individual_warning_stock_spin.value())

        if success:
            QMessageBox.information(self, "Th√†nh c√¥ng",
                                  f"‚úÖ ƒê√£ c√†i ƒë·∫∑t ng∆∞·ª°ng ri√™ng bi·ªát cho '{ingredient}'!")
            self.load_individual_threshold_settings()
        else:
            QMessageBox.warning(self, "L·ªói", "‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t ng∆∞·ª°ng!")

    def remove_individual_threshold(self):
        """X√≥a ng∆∞·ª°ng ri√™ng bi·ªát"""
        ingredient = self.individual_ingredient_combo.currentText().strip()
        if not ingredient:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn th√†nh ph·∫ßn ƒë·ªÉ x√≥a!")
            return

        reply = QMessageBox.question(self, "X√°c nh·∫≠n",
                                   f"üóëÔ∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ª°ng ri√™ng bi·ªát cho '{ingredient}'?\n"
                                   f"Th√†nh ph·∫ßn n√†y s·∫Ω s·ª≠ d·ª•ng ng∆∞·ª°ng chung.",
                                   QMessageBox.Yes | QMessageBox.No)

        if reply == QMessageBox.Yes:
            if self.threshold_manager.remove_individual_threshold(ingredient):
                QMessageBox.information(self, "Th√†nh c√¥ng",
                                      f"‚úÖ ƒê√£ x√≥a ng∆∞·ª°ng ri√™ng bi·ªát cho '{ingredient}'!")
                self.load_individual_threshold_settings()
            else:
                QMessageBox.warning(self, "L·ªói", "‚ùå Kh√¥ng th·ªÉ x√≥a ng∆∞·ª°ng!")

    def clear_all_individual_thresholds(self):
        """X√≥a t·∫•t c·∫£ ng∆∞·ª°ng ri√™ng bi·ªát"""
        reply = QMessageBox.question(self, "X√°c nh·∫≠n",
                                   "üóëÔ∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ ng∆∞·ª°ng ri√™ng bi·ªát?\n"
                                   "T·∫•t c·∫£ th√†nh ph·∫ßn s·∫Ω s·ª≠ d·ª•ng ng∆∞·ª°ng chung.",
                                   QMessageBox.Yes | QMessageBox.No)

        if reply == QMessageBox.Yes:
            self.threshold_manager.individual_thresholds = {}
            if self.threshold_manager.save_individual_thresholds():
                QMessageBox.information(self, "Th√†nh c√¥ng",
                                      "‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ ng∆∞·ª°ng ri√™ng bi·ªát!")
                self.load_individual_threshold_settings()
            else:
                QMessageBox.warning(self, "L·ªói", "‚ùå Kh√¥ng th·ªÉ x√≥a ng∆∞·ª°ng!")

    def set_combo_by_data(self, combo, data_value):
        """Thi·∫øt l·∫≠p ComboBox theo gi√° tr·ªã data"""
        for i in range(combo.count()):
            if combo.itemData(i) == data_value:
                combo.setCurrentIndex(i)
                return
        # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo text
        index = combo.findText(data_value)
        if index >= 0:
            combo.setCurrentIndex(index)

    def test_sound(self):
        """Test √¢m thanh c·∫£nh b√°o"""
        try:
            # Simple beep for testing
            import winsound
            if self.sound_enabled_checkbox.isChecked():
                volume = self.volume_slider.value()
                # Play system beep (frequency based on volume)
                frequency = 800 + (volume * 10)  # 800-1800 Hz
                duration = 500  # 0.5 seconds
                winsound.Beep(int(frequency), duration)
            else:
                QMessageBox.information(self, "Test √Çm Thanh", "√Çm thanh ƒë√£ b·ªã t·∫Øt!")
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ ph√°t √¢m thanh: {str(e)}")

    def choose_color(self, color_key):
        """Ch·ªçn m√†u s·∫Øc t√πy ch·ªânh"""
        current_color = self.color_buttons[color_key].palette().button().color()
        color = QColorDialog.getColor(current_color, self, f"Ch·ªçn m√†u cho {color_key}")

        if color.isValid():
            color_hex = color.name()
            self.color_buttons[color_key].setStyleSheet(
                f"background-color: {color_hex}; border: 2px solid #ccc; border-radius: 4px;"
            )
            self.update_color_preview()

    def reset_color(self, color_key, default_color):
        """ƒê·∫∑t l·∫°i m√†u m·∫∑c ƒë·ªãnh"""
        self.color_buttons[color_key].setStyleSheet(
            f"background-color: {default_color}; border: 2px solid #ccc; border-radius: 4px;"
        )
        self.update_color_preview()

    def update_color_preview(self):
        """C·∫≠p nh·∫≠t xem tr∆∞·ªõc m√†u s·∫Øc"""
        if not self.use_custom_colors_checkbox.isChecked():
            self.color_preview_label.setText("S·ª≠ d·ª•ng m√†u m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng")
            return

        # Get current colors from buttons
        colors = {}
        for key, button in self.color_buttons.items():
            style = button.styleSheet()
            # Extract color from stylesheet
            import re
            match = re.search(r'background-color:\s*(#[0-9a-fA-F]{6})', style)
            if match:
                colors[key] = match.group(1)

        # Create preview text
        preview_html = f"""
        <div style="text-align: center;">
            <span style="color: {colors.get('critical', '#f44336')}; font-weight: bold;">üî¥ Kh·∫©n c·∫•p</span><br>
            <span style="color: {colors.get('warning', '#ff9800')}; font-weight: bold;">üü° S·∫Øp h·∫øt</span><br>
            <span style="color: {colors.get('sufficient', '#4caf50')}; font-weight: bold;">üü¢ ƒê·ªß h√†ng</span><br>
            <span style="color: {colors.get('no_data', '#9e9e9e')}; font-weight: bold;">‚ö™ Kh√¥ng c√≥ d·ªØ li·ªáu</span>
        </div>
        """
        self.color_preview_label.setText(preview_html)

    def update_current_settings_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã c√†i ƒë·∫∑t hi·ªán t·∫°i"""
        desc = self.threshold_manager.get_threshold_description()
        thresholds = self.threshold_manager.get_thresholds()

        display_text = f"üìä C√†i ƒë·∫∑t hi·ªán t·∫°i: {desc}\n"
        display_text += f"üî¥ Kh·∫©n c·∫•p: <{thresholds['critical_days']} ng√†y ho·∫∑c ‚â§{thresholds['critical_stock']} kg\n"
        display_text += f"üü° S·∫Øp h·∫øt: <{thresholds['warning_days']} ng√†y ho·∫∑c ‚â§{thresholds['warning_stock']} kg\n"
        display_text += f"üü¢ ƒê·ªß h√†ng: >{thresholds['sufficient_days']} ng√†y ho·∫∑c >{thresholds['sufficient_stock']} kg"

        self.current_settings_label.setText(display_text)

    def save_settings(self):
        """L∆∞u t·∫•t c·∫£ c√†i ƒë·∫∑t"""
        try:
            # Basic thresholds
            new_thresholds = {
                "critical_days": self.critical_days_spin.value(),
                "warning_days": self.warning_days_spin.value(),
                "sufficient_days": self.sufficient_days_spin.value(),
                "critical_stock": self.critical_stock_spin.value(),
                "warning_stock": self.warning_stock_spin.value(),
                "sufficient_stock": self.sufficient_stock_spin.value(),
                "use_days_based": self.use_days_checkbox.isChecked(),
                "use_stock_based": self.use_stock_checkbox.isChecked()
            }

            # Display settings
            display_settings = {
                "display_unit": self.display_unit_combo.currentData() or "both",
                "show_days_in_table": self.show_days_checkbox.isChecked(),
                "show_stock_in_table": self.show_stock_checkbox.isChecked()
            }

            # Sound settings
            sound_settings = {
                "sound_enabled": self.sound_enabled_checkbox.isChecked(),
                "sound_critical": self.sound_critical_checkbox.isChecked(),
                "sound_warning": self.sound_warning_checkbox.isChecked(),
                "sound_volume": self.volume_slider.value()
            }

            # Auto check settings
            auto_check_settings = {
                "auto_check_enabled": self.auto_check_checkbox.isChecked(),
                "check_frequency": self.check_frequency_combo.currentData() or "hourly",
                "check_interval_hours": self.check_interval_spin.value()
            }

            # Popup settings
            popup_settings = {
                "popup_enabled": self.popup_enabled_checkbox.isChecked(),
                "popup_on_startup": self.popup_startup_checkbox.isChecked(),
                "popup_on_critical": self.popup_critical_checkbox.isChecked(),
                "popup_on_warning": self.popup_warning_checkbox.isChecked()
            }

            # Auto report settings
            auto_report_settings = {
                "auto_report_enabled": self.auto_report_checkbox.isChecked(),
                "report_frequency": self.report_frequency_combo.currentData() or "daily",
                "report_time": self.report_time_edit.time().toString("HH:mm"),
                "report_path": self.report_path_edit.text().strip()
            }

            # Color settings
            color_settings = {
                "use_custom_colors": self.use_custom_colors_checkbox.isChecked()
            }

            # Extract colors from buttons
            for key, button in self.color_buttons.items():
                style = button.styleSheet()
                import re
                match = re.search(r'background-color:\s*(#[0-9a-fA-F]{6})', style)
                if match:
                    color_settings[f"color_{key}"] = match.group(1)

            # Save all settings
            success = True
            success &= self.threshold_manager.update_thresholds(new_thresholds)
            success &= self.threshold_manager.update_display_settings(display_settings)
            success &= self.threshold_manager.update_sound_settings(sound_settings)
            success &= self.threshold_manager.update_auto_check_settings(auto_check_settings)
            success &= self.threshold_manager.update_popup_settings(popup_settings)
            success &= self.threshold_manager.update_auto_report_settings(auto_report_settings)
            success &= self.threshold_manager.update_color_settings(color_settings)

            if success:
                QMessageBox.information(self, "Th√†nh c√¥ng",
                                      "‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ c√†i ƒë·∫∑t ng∆∞·ª°ng c·∫£nh b√°o th√†nh c√¥ng!\n"
                                      "H·ªá th·ªëng s·∫Ω √°p d·ª•ng c√°c c√†i ƒë·∫∑t m·ªõi ngay l·∫≠p t·ª©c.")
                self.accept()
            else:
                QMessageBox.warning(self, "L·ªói",
                                  "‚ùå Kh√¥ng th·ªÉ l∆∞u m·ªôt s·ªë c√†i ƒë·∫∑t. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã.")

        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"‚ùå L·ªói khi l∆∞u c√†i ƒë·∫∑t: {str(e)}")

    def reset_to_defaults(self):
        """ƒê·∫∑t l·∫°i v·ªÅ c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh"""
        reply = QMessageBox.question(self, "X√°c nh·∫≠n",
                                   "üîÑ B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫∑t l·∫°i v·ªÅ c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh?\n"
                                   "T·∫•t c·∫£ c√†i ƒë·∫∑t hi·ªán t·∫°i s·∫Ω b·ªã m·∫•t.",
                                   QMessageBox.Yes | QMessageBox.No)

        if reply == QMessageBox.Yes:
            if self.threshold_manager.reset_to_defaults():
                self.load_current_settings()
                QMessageBox.information(self, "Th√†nh c√¥ng",
                                      "‚úÖ ƒê√£ ƒë·∫∑t l·∫°i v·ªÅ c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh th√†nh c√¥ng!")
            else:
                QMessageBox.warning(self, "L·ªói",
                                  "‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh.")
