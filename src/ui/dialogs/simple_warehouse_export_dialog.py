#!/usr/bin/env python3
"""
Simple Warehouse Export Dialog - Dialog xu·∫•t b√°o c√°o ƒë∆°n gi·∫£n kh√¥ng c√≥ l·ªói QWidget
"""

import os
import subprocess
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
                            QGroupBox, QCheckBox, QMessageBox, QProgressBar,
                            QRadioButton, QButtonGroup)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QFont

try:
    from src.services.warehouse_export_service import WarehouseExportService
except ImportError:
    try:
        from services.warehouse_export_service import WarehouseExportService
    except ImportError:
        WarehouseExportService = None


class SimpleExportWorker(QThread):
    """Worker thread ƒë∆°n gi·∫£n cho xu·∫•t b√°o c√°o"""
    progress_updated = pyqtSignal(int)
    status_updated = pyqtSignal(str)
    export_completed = pyqtSignal(bool, str)
    
    def __init__(self, export_service, export_type, options):
        super().__init__()
        self.export_service = export_service
        self.export_type = export_type
        self.options = options
    
    def run(self):
        """Th·ª±c hi·ªán xu·∫•t b√°o c√°o"""
        try:
            self.status_updated.emit("ƒêang chu·∫©n b·ªã...")
            self.progress_updated.emit(20)
            
            # Th·ª±c hi·ªán xu·∫•t theo lo·∫°i
            if self.export_type == "inventory":
                success, message = self.export_service.export_inventory_report(
                    include_feed=self.options.get('include_feed', True),
                    include_mix=self.options.get('include_mix', True)
                )
            elif self.export_type == "formula":
                success, message = self.export_service.export_formula_report(
                    include_feed=self.options.get('include_feed', True),
                    include_mix=self.options.get('include_mix', True)
                )
            elif self.export_type == "summary":
                success, message = self.export_service.export_summary_report()
            else:
                success, message = False, "Lo·∫°i b√°o c√°o kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£"
            
            self.progress_updated.emit(100)
            self.export_completed.emit(success, message)
            
        except Exception as e:
            self.export_completed.emit(False, f"L·ªói xu·∫•t b√°o c√°o: {str(e)}")


class SimpleWarehouseExportDialog(QDialog):
    """Dialog xu·∫•t b√°o c√°o ƒë∆°n gi·∫£n"""
    
    def __init__(self, parent=None, default_type="inventory"):
        super().__init__(parent)
        self.parent_app = parent
        self.default_type = default_type
        self.worker_thread = None
        
        # Kh·ªüi t·∫°o export service
        if WarehouseExportService:
            try:
                self.export_service = WarehouseExportService()
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªãch v·ª• xu·∫•t b√°o c√°o:\n{str(e)}")
                self.reject()
                return
        else:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫£i d·ªãch v·ª• xu·∫•t b√°o c√°o.\nVui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t pandas v√† openpyxl.")
            self.reject()
            return
        
        self.init_ui()
        self.set_default_type()
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ƒë∆°n gi·∫£n"""
        self.setWindowTitle("Xu·∫•t B√°o C√°o Excel")
        self.setModal(True)
        self.resize(400, 350)
        
        # Layout ch√≠nh
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Header
        header = QLabel("üìä Xu·∫•t B√°o C√°o Excel")
        header.setFont(QFont("Arial", 16, QFont.Bold))
        header.setAlignment(Qt.AlignCenter)
        header.setStyleSheet("""
            QLabel {
                color: #1976D2;
                padding: 15px;
                background-color: #E3F2FD;
                border-radius: 8px;
                border: 2px solid #2196F3;
            }
        """)
        layout.addWidget(header)
        
        # Ch·ªçn lo·∫°i b√°o c√°o
        type_group = QGroupBox("Ch·ªçn Lo·∫°i B√°o C√°o")
        type_group.setFont(QFont("Arial", 12, QFont.Bold))
        type_layout = QVBoxLayout()
        
        self.report_type_group = QButtonGroup()
        
        self.inventory_radio = QRadioButton("üì¶ B√°o C√°o T·ªìn Kho")
        self.inventory_radio.setFont(QFont("Arial", 11))
        self.report_type_group.addButton(self.inventory_radio, 0)
        type_layout.addWidget(self.inventory_radio)
        
        self.formula_radio = QRadioButton("üß™ B√°o C√°o C√¥ng Th·ª©c")
        self.formula_radio.setFont(QFont("Arial", 11))
        self.report_type_group.addButton(self.formula_radio, 1)
        type_layout.addWidget(self.formula_radio)
        
        self.summary_radio = QRadioButton("üìà B√°o C√°o T·ªïng H·ª£p")
        self.summary_radio.setFont(QFont("Arial", 11))
        self.report_type_group.addButton(self.summary_radio, 2)
        type_layout.addWidget(self.summary_radio)
        
        type_group.setLayout(type_layout)
        layout.addWidget(type_group)
        
        # T√πy ch·ªçn kho
        self.options_group = QGroupBox("T√πy Ch·ªçn")
        self.options_group.setFont(QFont("Arial", 12, QFont.Bold))
        options_layout = QVBoxLayout()
        
        self.feed_checkbox = QCheckBox("Bao g·ªìm Kho C√°m")
        self.feed_checkbox.setChecked(True)
        options_layout.addWidget(self.feed_checkbox)
        
        self.mix_checkbox = QCheckBox("Bao g·ªìm Kho Mix")
        self.mix_checkbox.setChecked(True)
        options_layout.addWidget(self.mix_checkbox)
        
        self.options_group.setLayout(options_layout)
        layout.addWidget(self.options_group)
        
        # K·∫øt n·ªëi s·ª± ki·ªán
        self.report_type_group.buttonClicked.connect(self.on_report_type_changed)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        self.status_label = QLabel("")
        self.status_label.setVisible(False)
        self.status_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.status_label)
        
        # Th√¥ng tin
        info_label = QLabel("üìÅ File s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c src/data/exports/")
        info_label.setFont(QFont("Arial", 9))
        info_label.setStyleSheet("color: #666; padding: 10px;")
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        # N√∫t m·ªü th∆∞ m·ª•c
        open_folder_btn = QPushButton("üìÅ M·ªü Th∆∞ M·ª•c")
        open_folder_btn.setFont(QFont("Arial", 10))
        open_folder_btn.clicked.connect(self.open_export_folder)
        button_layout.addWidget(open_folder_btn)
        
        button_layout.addStretch()
        
        # N√∫t xu·∫•t
        self.export_button = QPushButton("üì§ Xu·∫•t B√°o C√°o")
        self.export_button.setFont(QFont("Arial", 12, QFont.Bold))
        self.export_button.setMinimumHeight(40)
        self.export_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        self.export_button.clicked.connect(self.start_export)
        button_layout.addWidget(self.export_button)
        
        # N√∫t h·ªßy
        cancel_button = QPushButton("H·ªßy")
        cancel_button.setFont(QFont("Arial", 11))
        cancel_button.setMinimumHeight(40)
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(cancel_button)
        
        layout.addLayout(button_layout)
        self.setLayout(layout)
    
    def set_default_type(self):
        """ƒê·∫∑t lo·∫°i b√°o c√°o m·∫∑c ƒë·ªãnh"""
        if self.default_type == "formula":
            self.formula_radio.setChecked(True)
        elif self.default_type == "summary":
            self.summary_radio.setChecked(True)
        else:
            self.inventory_radio.setChecked(True)
        
        self.on_report_type_changed()
    
    def on_report_type_changed(self):
        """X·ª≠ l√Ω khi thay ƒë·ªïi lo·∫°i b√°o c√°o"""
        # B√°o c√°o t·ªïng h·ª£p kh√¥ng c·∫ßn t√πy ch·ªçn kho
        if self.summary_radio.isChecked():
            self.options_group.setEnabled(False)
        else:
            self.options_group.setEnabled(True)
    
    def get_export_type(self):
        """L·∫•y lo·∫°i b√°o c√°o ƒë∆∞·ª£c ch·ªçn"""
        if self.formula_radio.isChecked():
            return "formula"
        elif self.summary_radio.isChecked():
            return "summary"
        else:
            return "inventory"
    
    def get_export_options(self):
        """L·∫•y t√πy ch·ªçn xu·∫•t"""
        return {
            'include_feed': self.feed_checkbox.isChecked(),
            'include_mix': self.mix_checkbox.isChecked()
        }
    
    def validate_options(self):
        """Ki·ªÉm tra t√πy ch·ªçn"""
        if self.summary_radio.isChecked():
            return True
        
        if not (self.feed_checkbox.isChecked() or self.mix_checkbox.isChecked()):
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kho ƒë·ªÉ xu·∫•t!")
            return False
        
        return True
    
    def start_export(self):
        """B·∫Øt ƒë·∫ßu xu·∫•t b√°o c√°o"""
        if not self.validate_options():
            return
        
        # V√¥ hi·ªáu h√≥a UI
        self.export_button.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.status_label.setVisible(True)
        self.progress_bar.setValue(0)
        
        # L·∫•y th√¥ng tin xu·∫•t
        export_type = self.get_export_type()
        export_options = self.get_export_options()
        
        # T·∫°o v√† ch·∫°y worker thread
        self.worker_thread = SimpleExportWorker(self.export_service, export_type, export_options)
        self.worker_thread.progress_updated.connect(self.progress_bar.setValue)
        self.worker_thread.status_updated.connect(self.status_label.setText)
        self.worker_thread.export_completed.connect(self.on_export_completed)
        self.worker_thread.start()
    
    def on_export_completed(self, success, message):
        """X·ª≠ l√Ω khi xu·∫•t xong"""
        # K√≠ch ho·∫°t l·∫°i UI
        self.export_button.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.status_label.setVisible(False)
        
        if success:
            reply = QMessageBox.question(
                self, 
                "Th√†nh c√¥ng", 
                f"{message}\n\nB·∫°n c√≥ mu·ªën m·ªü th∆∞ m·ª•c ch·ª©a file kh√¥ng?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )
            
            if reply == QMessageBox.Yes:
                self.open_export_folder()
            
            self.accept()
        else:
            QMessageBox.critical(self, "L·ªói", f"Xu·∫•t b√°o c√°o th·∫•t b·∫°i:\n{message}")
    
    def open_export_folder(self):
        """M·ªü th∆∞ m·ª•c ch·ª©a file xu·∫•t"""
        try:
            export_dir = self.export_service.get_export_directory()
            if os.name == 'nt':  # Windows
                os.startfile(export_dir)
            elif os.name == 'posix':  # macOS and Linux
                subprocess.call(['open', export_dir])
        except Exception as e:
            QMessageBox.warning(self, "C·∫£nh b√°o", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c:\n{str(e)}")
    
    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng dialog"""
        if self.worker_thread and self.worker_thread.isRunning():
            reply = QMessageBox.question(
                self, 
                "X√°c nh·∫≠n", 
                "ƒêang c√≥ ti·∫øn tr√¨nh xu·∫•t b√°o c√°o. B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                self.worker_thread.terminate()
                self.worker_thread.wait()
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()
