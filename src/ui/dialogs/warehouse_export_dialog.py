#!/usr/bin/env python3
"""
Warehouse Export Dialog - Dialog xu·∫•t b√°o c√°o kho h√†ng
Phi√™n b·∫£n m·ªõi ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë∆°n gi·∫£n v√† ƒë√°ng tin c·∫≠y
"""

import os
import subprocess
import sys
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
                            QGroupBox, QCheckBox, QMessageBox, QProgressBar,
                            QRadioButton, QButtonGroup, QFrame, QTextEdit)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPixmap, QIcon

try:
    from src.services.warehouse_export_service import WarehouseExportService
except ImportError:
    try:
        from services.warehouse_export_service import WarehouseExportService
    except ImportError:
        WarehouseExportService = None


class ExportWorkerThread(QThread):
    """Thread worker ƒë·ªÉ xu·∫•t b√°o c√°o"""
    progress_updated = pyqtSignal(int)
    status_updated = pyqtSignal(str)
    export_completed = pyqtSignal(bool, str)
    
    def __init__(self, export_service, export_type, options):
        super().__init__()
        self.export_service = export_service
        self.export_type = export_type
        self.options = options
    
    def run(self):
        """Th·ª±c hi·ªán xu·∫•t b√°o c√°o"""
        try:
            self.status_updated.emit("ƒêang kh·ªüi t·∫°o...")
            self.progress_updated.emit(10)
            
            self.status_updated.emit("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu...")
            self.progress_updated.emit(30)
            
            # Th·ª±c hi·ªán xu·∫•t theo lo·∫°i
            if self.export_type == "inventory":
                success, message = self.export_service.export_inventory_report(
                    include_feed=self.options.get('include_feed', True),
                    include_mix=self.options.get('include_mix', True)
                )
            elif self.export_type == "formula":
                success, message = self.export_service.export_formula_report(
                    include_feed=self.options.get('include_feed', True),
                    include_mix=self.options.get('include_mix', True)
                )
            elif self.export_type == "summary":
                success, message = self.export_service.export_summary_report()
            else:
                success, message = False, "Lo·∫°i b√°o c√°o kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£"
            
            self.progress_updated.emit(90)
            self.status_updated.emit("ƒêang ho√†n t·∫•t...")
            
            self.progress_updated.emit(100)
            self.export_completed.emit(success, message)
            
        except Exception as e:
            self.export_completed.emit(False, f"L·ªói kh√¥ng mong mu·ªën: {str(e)}")


class WarehouseExportDialog(QDialog):
    """Dialog xu·∫•t b√°o c√°o kho h√†ng"""
    
    def __init__(self, parent=None, default_type="inventory"):
        super().__init__(parent)
        self.parent_app = parent
        self.default_type = default_type
        self.worker_thread = None
        
        # Kh·ªüi t·∫°o export service
        if WarehouseExportService:
            try:
                self.export_service = WarehouseExportService()
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªãch v·ª• xu·∫•t b√°o c√°o: {str(e)}")
                self.reject()
                return
        else:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫£i d·ªãch v·ª• xu·∫•t b√°o c√°o")
            self.reject()
            return
        
        self.init_ui()
        self.set_default_type()
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        self.setWindowTitle("Xu·∫•t B√°o C√°o Kho H√†ng")
        self.setModal(True)
        self.resize(500, 450)
        
        # Layout ch√≠nh
        main_layout = QVBoxLayout()
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Header v·ªõi icon
        self.create_header(main_layout)
        
        # Ph·∫ßn ch·ªçn lo·∫°i b√°o c√°o
        self.create_report_type_section(main_layout)
        
        # Ph·∫ßn t√πy ch·ªçn
        self.create_options_section(main_layout)
        
        # Ph·∫ßn ti·∫øn tr√¨nh
        self.create_progress_section(main_layout)
        
        # Ph·∫ßn th√¥ng tin
        self.create_info_section(main_layout)
        
        # Ph·∫ßn n√∫t b·∫•m
        self.create_buttons_section(main_layout)
        
        self.setLayout(main_layout)
    
    def create_header(self, layout):
        """T·∫°o header"""
        header_frame = QFrame()
        header_frame.setStyleSheet("""
            QFrame {
                background-color: #E3F2FD;
                border: 2px solid #2196F3;
                border-radius: 10px;
                padding: 10px;
            }
        """)
        
        header_layout = QVBoxLayout()
        
        title = QLabel("üìä XU·∫§T B√ÅO C√ÅO KHO H√ÄNG")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #1976D2; background: transparent; border: none;")
        
        subtitle = QLabel("T·∫°o b√°o c√°o Excel cho qu·∫£n l√Ω kho h√†ng")
        subtitle.setFont(QFont("Arial", 10))
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet("color: #666; background: transparent; border: none;")
        
        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)
        header_frame.setLayout(header_layout)
        
        layout.addWidget(header_frame)
    
    def create_report_type_section(self, layout):
        """T·∫°o ph·∫ßn ch·ªçn lo·∫°i b√°o c√°o"""
        type_group = QGroupBox("Ch·ªçn Lo·∫°i B√°o C√°o")
        type_group.setFont(QFont("Arial", 12, QFont.Bold))
        type_layout = QVBoxLayout()
        
        self.report_type_group = QButtonGroup()
        
        # B√°o c√°o t·ªìn kho
        self.inventory_radio = QRadioButton("üì¶ B√°o C√°o T·ªìn Kho")
        self.inventory_radio.setFont(QFont("Arial", 11))
        self.inventory_radio.setToolTip("Xu·∫•t danh s√°ch nguy√™n li·ªáu v√† s·ªë l∆∞·ª£ng t·ªìn kho")
        self.report_type_group.addButton(self.inventory_radio, 0)
        type_layout.addWidget(self.inventory_radio)
        
        # B√°o c√°o c√¥ng th·ª©c
        self.formula_radio = QRadioButton("üß™ B√°o C√°o C√¥ng Th·ª©c")
        self.formula_radio.setFont(QFont("Arial", 11))
        self.formula_radio.setToolTip("Xu·∫•t c√¥ng th·ª©c s·∫£n xu·∫•t v√† t·ª∑ l·ªá nguy√™n li·ªáu")
        self.report_type_group.addButton(self.formula_radio, 1)
        type_layout.addWidget(self.formula_radio)
        
        # B√°o c√°o t·ªïng h·ª£p
        self.summary_radio = QRadioButton("üìà B√°o C√°o T·ªïng H·ª£p")
        self.summary_radio.setFont(QFont("Arial", 11))
        self.summary_radio.setToolTip("Xu·∫•t th·ªëng k√™ t·ªïng quan v·ªÅ kho h√†ng")
        self.report_type_group.addButton(self.summary_radio, 2)
        type_layout.addWidget(self.summary_radio)
        
        type_group.setLayout(type_layout)
        layout.addWidget(type_group)
    
    def create_options_section(self, layout):
        """T·∫°o ph·∫ßn t√πy ch·ªçn"""
        self.options_group = QGroupBox("T√πy Ch·ªçn Xu·∫•t")
        self.options_group.setFont(QFont("Arial", 12, QFont.Bold))
        options_layout = QVBoxLayout()
        
        # T√πy ch·ªçn kho
        warehouse_layout = QHBoxLayout()
        warehouse_layout.addWidget(QLabel("Ch·ªçn kho:"))
        
        self.feed_checkbox = QCheckBox("Kho C√°m")
        self.feed_checkbox.setChecked(True)
        self.feed_checkbox.setToolTip("Bao g·ªìm d·ªØ li·ªáu kho c√°m")
        warehouse_layout.addWidget(self.feed_checkbox)
        
        self.mix_checkbox = QCheckBox("Kho Mix")
        self.mix_checkbox.setChecked(True)
        self.mix_checkbox.setToolTip("Bao g·ªìm d·ªØ li·ªáu kho mix")
        warehouse_layout.addWidget(self.mix_checkbox)
        
        warehouse_layout.addStretch()
        options_layout.addLayout(warehouse_layout)
        
        # K·∫øt n·ªëi s·ª± ki·ªán thay ƒë·ªïi lo·∫°i b√°o c√°o
        self.report_type_group.buttonClicked.connect(self.on_report_type_changed)
        
        self.options_group.setLayout(options_layout)
        layout.addWidget(self.options_group)
    
    def create_progress_section(self, layout):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã ti·∫øn tr√¨nh"""
        self.progress_frame = QFrame()
        progress_layout = QVBoxLayout()
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #ddd;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                border-radius: 3px;
            }
        """)
        progress_layout.addWidget(self.progress_bar)
        
        self.status_label = QLabel("")
        self.status_label.setVisible(False)
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666; font-style: italic;")
        progress_layout.addWidget(self.status_label)
        
        self.progress_frame.setLayout(progress_layout)
        layout.addWidget(self.progress_frame)
    
    def create_info_section(self, layout):
        """T·∫°o ph·∫ßn th√¥ng tin"""
        info_group = QGroupBox("Th√¥ng Tin")
        info_group.setFont(QFont("Arial", 10, QFont.Bold))
        info_layout = QVBoxLayout()
        
        export_dir = self.export_service.get_export_directory()
        info_text = f"üìÅ File s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i:\n{export_dir}"
        
        exported_files = self.export_service.list_exported_files()
        if exported_files:
            info_text += f"\n\nüìÑ File g·∫ßn ƒë√¢y ({len(exported_files)} file):\n"
            for i, filename in enumerate(exported_files[:3]):
                info_text += f"‚Ä¢ {filename}\n"
            if len(exported_files) > 3:
                info_text += f"... v√† {len(exported_files) - 3} file kh√°c"
        
        info_label = QLabel(info_text)
        info_label.setFont(QFont("Arial", 9))
        info_label.setStyleSheet("color: #555; padding: 10px;")
        info_label.setWordWrap(True)
        
        info_layout.addWidget(info_label)
        info_group.setLayout(info_layout)
        layout.addWidget(info_group)
    
    def create_buttons_section(self, layout):
        """T·∫°o ph·∫ßn n√∫t b·∫•m"""
        button_layout = QHBoxLayout()
        
        # N√∫t m·ªü th∆∞ m·ª•c
        self.open_folder_button = QPushButton("üìÅ M·ªü Th∆∞ M·ª•c")
        self.open_folder_button.setFont(QFont("Arial", 10))
        self.open_folder_button.setMinimumHeight(35)
        self.open_folder_button.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        self.open_folder_button.clicked.connect(self.open_export_folder)
        button_layout.addWidget(self.open_folder_button)
        
        button_layout.addStretch()
        
        # N√∫t xu·∫•t
        self.export_button = QPushButton("üì§ Xu·∫•t B√°o C√°o")
        self.export_button.setFont(QFont("Arial", 12, QFont.Bold))
        self.export_button.setMinimumHeight(40)
        self.export_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        self.export_button.clicked.connect(self.start_export)
        button_layout.addWidget(self.export_button)
        
        # N√∫t h·ªßy
        self.cancel_button = QPushButton("H·ªßy")
        self.cancel_button.setFont(QFont("Arial", 11))
        self.cancel_button.setMinimumHeight(40)
        self.cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
        """)
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_button)
        
        layout.addLayout(button_layout)
    
    def set_default_type(self):
        """ƒê·∫∑t lo·∫°i b√°o c√°o m·∫∑c ƒë·ªãnh"""
        if self.default_type == "formula":
            self.formula_radio.setChecked(True)
        elif self.default_type == "summary":
            self.summary_radio.setChecked(True)
        else:
            self.inventory_radio.setChecked(True)
        
        self.on_report_type_changed()
    
    def on_report_type_changed(self):
        """X·ª≠ l√Ω khi thay ƒë·ªïi lo·∫°i b√°o c√°o"""
        # B√°o c√°o t·ªïng h·ª£p kh√¥ng c·∫ßn t√πy ch·ªçn kho
        if self.summary_radio.isChecked():
            self.options_group.setEnabled(False)
        else:
            self.options_group.setEnabled(True)
    
    def get_export_type(self):
        """L·∫•y lo·∫°i b√°o c√°o ƒë∆∞·ª£c ch·ªçn"""
        if self.formula_radio.isChecked():
            return "formula"
        elif self.summary_radio.isChecked():
            return "summary"
        else:
            return "inventory"
    
    def get_export_options(self):
        """L·∫•y t√πy ch·ªçn xu·∫•t"""
        return {
            'include_feed': self.feed_checkbox.isChecked(),
            'include_mix': self.mix_checkbox.isChecked()
        }
    
    def validate_options(self):
        """Ki·ªÉm tra t√πy ch·ªçn"""
        if self.summary_radio.isChecked():
            return True  # B√°o c√°o t·ªïng h·ª£p kh√¥ng c·∫ßn ki·ªÉm tra
        
        if not (self.feed_checkbox.isChecked() or self.mix_checkbox.isChecked()):
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kho ƒë·ªÉ xu·∫•t!")
            return False
        
        return True
    
    def start_export(self):
        """B·∫Øt ƒë·∫ßu xu·∫•t b√°o c√°o"""
        if not self.validate_options():
            return
        
        # V√¥ hi·ªáu h√≥a UI
        self.export_button.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.status_label.setVisible(True)
        self.progress_bar.setValue(0)
        
        # L·∫•y th√¥ng tin xu·∫•t
        export_type = self.get_export_type()
        export_options = self.get_export_options()
        
        # T·∫°o v√† ch·∫°y worker thread
        self.worker_thread = ExportWorkerThread(self.export_service, export_type, export_options)
        self.worker_thread.progress_updated.connect(self.progress_bar.setValue)
        self.worker_thread.status_updated.connect(self.status_label.setText)
        self.worker_thread.export_completed.connect(self.on_export_completed)
        self.worker_thread.start()
    
    def on_export_completed(self, success, message):
        """X·ª≠ l√Ω khi xu·∫•t xong"""
        # K√≠ch ho·∫°t l·∫°i UI
        self.export_button.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.status_label.setVisible(False)
        
        if success:
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi t√πy ch·ªçn m·ªü file
            reply = QMessageBox.question(
                self, 
                "Th√†nh c√¥ng", 
                f"{message}\n\nB·∫°n c√≥ mu·ªën m·ªü th∆∞ m·ª•c ch·ª©a file kh√¥ng?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )
            
            if reply == QMessageBox.Yes:
                self.open_export_folder()
            
            self.accept()
        else:
            QMessageBox.critical(self, "L·ªói", f"Xu·∫•t b√°o c√°o th·∫•t b·∫°i:\n{message}")
    
    def open_export_folder(self):
        """M·ªü th∆∞ m·ª•c ch·ª©a file xu·∫•t"""
        try:
            export_dir = self.export_service.get_export_directory()
            if os.name == 'nt':  # Windows
                os.startfile(export_dir)
            elif os.name == 'posix':  # macOS and Linux
                subprocess.call(['open', export_dir])
        except Exception as e:
            QMessageBox.warning(self, "C·∫£nh b√°o", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c: {str(e)}")
    
    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng dialog"""
        if self.worker_thread and self.worker_thread.isRunning():
            reply = QMessageBox.question(
                self, 
                "X√°c nh·∫≠n", 
                "ƒêang c√≥ ti·∫øn tr√¨nh xu·∫•t b√°o c√°o. B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                self.worker_thread.terminate()
                self.worker_thread.wait()
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()
