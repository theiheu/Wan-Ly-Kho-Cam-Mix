#!/usr/bin/env python3
"""
Enhanced Export Dialog - Dialog xu·∫•t b√°o c√°o ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a v·ªõi nhi·ªÅu t√≠nh nƒÉng n√¢ng cao
"""

import os
import subprocess
from typing import List
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
                            QGroupBox, QCheckBox, QMessageBox, QProgressBar,
                            QRadioButton, QButtonGroup, QComboBox, QSpinBox,
                            QTabWidget, QWidget, QTextEdit, QSlider, QFrame,
                            QDateEdit, QListWidget, QListWidgetItem, QSplitter)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer, QDate
from PyQt5.QtGui import QFont, QPixmap, QIcon

try:
    from src.services.optimized_export_service import OptimizedExportService
except ImportError:
    try:
        from services.optimized_export_service import OptimizedExportService
    except ImportError:
        OptimizedExportService = None


class EnhancedExportWorker(QThread):
    """Worker thread n√¢ng cao v·ªõi progress callback chi ti·∫øt"""
    progress_updated = pyqtSignal(int)
    status_updated = pyqtSignal(str)
    export_completed = pyqtSignal(bool, str)
    performance_stats = pyqtSignal(dict)

    def __init__(self, export_service, export_type, options):
        super().__init__()
        self.export_service = export_service
        self.export_type = export_type
        self.options = options

    def run(self):
        """Th·ª±c hi·ªán xu·∫•t b√°o c√°o v·ªõi progress callback"""
        try:
            import time
            start_time = time.time()

            # Progress callback function
            def progress_callback(progress, status):
                self.progress_updated.emit(progress)
                self.status_updated.emit(status)

            # Execute export based on type
            if self.export_type == "inventory":
                success, message = self.export_service.export_inventory_report_optimized(
                    include_feed=self.options.get('include_feed', True),
                    include_mix=self.options.get('include_mix', True),
                    progress_callback=progress_callback
                )
            elif self.export_type == "formula":
                success, message = self.export_service.export_formula_report_optimized(
                    include_feed=self.options.get('include_feed', True),
                    include_mix=self.options.get('include_mix', True),
                    progress_callback=progress_callback
                )
            elif self.export_type == "summary":
                success, message = self.export_service.export_summary_report_optimized(
                    progress_callback=progress_callback
                )
            elif self.export_type == "daily_regional":
                from datetime import datetime
                start_date = datetime.combine(self.options.get('start_date'), datetime.min.time())
                end_date = datetime.combine(self.options.get('end_date'), datetime.min.time())

                success, message = self.export_service.export_daily_regional_report(
                    start_date=start_date,
                    end_date=end_date,
                    selected_regions=self.options.get('selected_regions', []),
                    include_feed=self.options.get('daily_include_feed', True),
                    include_mix=self.options.get('daily_include_mix', True),
                    progress_callback=progress_callback
                )
            elif self.export_type == "feed_component":
                from datetime import datetime
                start_date = datetime.combine(self.options.get('start_date'), datetime.min.time())
                end_date = datetime.combine(self.options.get('end_date'), datetime.min.time())

                success, message = self.export_service.export_feed_component_report(
                    start_date=start_date,
                    end_date=end_date,
                    selected_regions=self.options.get('selected_regions', []),
                    progress_callback=progress_callback
                )
            elif self.export_type == "mix_component":
                from datetime import datetime
                start_date = datetime.combine(self.options.get('start_date'), datetime.min.time())
                end_date = datetime.combine(self.options.get('end_date'), datetime.min.time())

                success, message = self.export_service.export_mix_component_report(
                    start_date=start_date,
                    end_date=end_date,
                    selected_regions=self.options.get('selected_regions', []),
                    progress_callback=progress_callback
                )
            else:
                success, message = False, "Lo·∫°i b√°o c√°o kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£"

            # Send performance statistics
            end_time = time.time()
            stats = {
                'processing_time': round(end_time - start_time, 2),
                'export_type': self.export_type,
                'success': success
            }
            self.performance_stats.emit(stats)

            self.export_completed.emit(success, message)

        except Exception as e:
            self.export_completed.emit(False, f"L·ªói xu·∫•t b√°o c√°o: {str(e)}")


class EnhancedExportDialog(QDialog):
    """Dialog xu·∫•t b√°o c√°o n√¢ng cao v·ªõi nhi·ªÅu t√≠nh nƒÉng t·ªëi ∆∞u"""

    def __init__(self, parent=None, default_type="inventory"):
        super().__init__(parent)
        self.parent_app = parent
        self.default_type = default_type
        self.worker_thread = None
        self.performance_stats = []

        # Initialize optimized export service
        if OptimizedExportService:
            try:
                self.export_service = OptimizedExportService()
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªãch v·ª• xu·∫•t b√°o c√°o t·ªëi ∆∞u:\n{str(e)}")
                self.reject()
                return
        else:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫£i d·ªãch v·ª• xu·∫•t b√°o c√°o t·ªëi ∆∞u.\nVui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.")
            self.reject()
            return

        self.init_ui()
        self.set_default_type()
        self.load_recent_exports()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán n√¢ng cao"""
        self.setWindowTitle("Xu·∫•t B√°o C√°o Excel - Phi√™n B·∫£n T·ªëi ∆Øu")
        self.setModal(True)
        self.resize(600, 550)

        # Main layout
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Header with performance indicator
        self.create_enhanced_header(layout)

        # Tab widget for organized options
        self.create_tabbed_interface(layout)

        # Enhanced progress section
        self.create_enhanced_progress_section(layout)

        # Performance monitoring
        self.create_performance_section(layout)

        # Enhanced buttons
        self.create_enhanced_buttons_section(layout)

        self.setLayout(layout)

    def create_enhanced_header(self, layout):
        """T·∫°o header n√¢ng cao v·ªõi performance indicator"""
        header_frame = QFrame()
        header_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #E3F2FD, stop:1 #BBDEFB);
                border: 2px solid #2196F3;
                border-radius: 12px;
                padding: 15px;
            }
        """)

        header_layout = QVBoxLayout()

        # Main title
        title = QLabel("üìä XU·∫§T B√ÅO C√ÅO EXCEL - PHI√äN B·∫¢N T·ªêI ∆ØU")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #1976D2; background: transparent; border: none;")

        # Subtitle with features
        subtitle = QLabel("‚ú® Hi·ªáu su·∫•t cao ‚Ä¢ ƒê·ªãnh d·∫°ng chuy√™n nghi·ªáp ‚Ä¢ Ph√¢n t√≠ch th√¥ng minh")
        subtitle.setFont(QFont("Arial", 10))
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet("color: #666; background: transparent; border: none;")

        # Performance indicator
        self.perf_indicator = QLabel("üöÄ S·∫µn s√†ng xu·∫•t b√°o c√°o")
        self.perf_indicator.setFont(QFont("Arial", 9))
        self.perf_indicator.setAlignment(Qt.AlignCenter)
        self.perf_indicator.setStyleSheet("color: #4CAF50; background: transparent; border: none;")

        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)
        header_layout.addWidget(self.perf_indicator)
        header_frame.setLayout(header_layout)

        layout.addWidget(header_frame)

    def create_tabbed_interface(self, layout):
        """T·∫°o giao di·ªán tab ƒë·ªÉ t·ªï ch·ª©c t√πy ch·ªçn"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #ddd;
                border-radius: 5px;
            }
            QTabBar::tab {
                background: #f0f0f0;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }
            QTabBar::tab:selected {
                background: #2196F3;
                color: white;
            }
        """)

        # Tab 1: Report Type & Options
        self.create_report_options_tab()

        # Tab 2: Advanced Settings
        self.create_advanced_settings_tab()

        # Tab 3: Daily Reports
        self.create_daily_reports_tab()

        # Tab 4: Recent Exports
        self.create_recent_exports_tab()

        layout.addWidget(self.tab_widget)

    def create_report_options_tab(self):
        """T·∫°o tab t√πy ch·ªçn b√°o c√°o"""
        tab1 = QWidget()
        tab1_layout = QVBoxLayout()

        # Report type selection
        type_group = QGroupBox("Ch·ªçn Lo·∫°i B√°o C√°o")
        type_group.setFont(QFont("Arial", 12, QFont.Bold))
        type_layout = QVBoxLayout()

        self.report_type_group = QButtonGroup()

        # Enhanced radio buttons with descriptions
        self.inventory_radio = QRadioButton("üì¶ B√°o C√°o T·ªìn Kho")
        self.inventory_radio.setFont(QFont("Arial", 11))
        self.inventory_radio.setToolTip("Xu·∫•t danh s√°ch chi ti·∫øt nguy√™n li·ªáu v·ªõi tr·∫°ng th√°i v√† gi√° tr·ªã ∆∞·ªõc t√≠nh")
        self.report_type_group.addButton(self.inventory_radio, 0)
        type_layout.addWidget(self.inventory_radio)

        inv_desc = QLabel("   ‚Üí Bao g·ªìm: S·ªë l∆∞·ª£ng, tr·∫°ng th√°i, gi√° tr·ªã ∆∞·ªõc t√≠nh, ph√¢n t√≠ch t·ªìn kho")
        inv_desc.setFont(QFont("Arial", 9))
        inv_desc.setStyleSheet("color: #666; margin-left: 20px;")
        type_layout.addWidget(inv_desc)

        self.formula_radio = QRadioButton("üß™ B√°o C√°o C√¥ng Th·ª©c")
        self.formula_radio.setFont(QFont("Arial", 11))
        self.formula_radio.setToolTip("Xu·∫•t c√¥ng th·ª©c s·∫£n xu·∫•t v·ªõi ph√¢n t√≠ch kh·∫£ nƒÉng s·∫£n xu·∫•t")
        self.report_type_group.addButton(self.formula_radio, 1)
        type_layout.addWidget(self.formula_radio)

        form_desc = QLabel("   ‚Üí Bao g·ªìm: T·ª∑ l·ªá, t·ªìn kho hi·ªán t·∫°i, kh·∫£ nƒÉng s·∫£n xu·∫•t, ph√¢n t√≠ch h·∫°n ch·∫ø")
        form_desc.setFont(QFont("Arial", 9))
        form_desc.setStyleSheet("color: #666; margin-left: 20px;")
        type_layout.addWidget(form_desc)

        self.summary_radio = QRadioButton("üìà B√°o C√°o T·ªïng H·ª£p")
        self.summary_radio.setFont(QFont("Arial", 11))
        self.summary_radio.setToolTip("Xu·∫•t th·ªëng k√™ t·ªïng quan v·ªõi nhi·ªÅu sheet ph√¢n t√≠ch")
        self.report_type_group.addButton(self.summary_radio, 2)
        type_layout.addWidget(self.summary_radio)

        summ_desc = QLabel("   ‚Üí Bao g·ªìm: Th·ªëng k√™ t·ªïng quan, ph√¢n t√≠ch tr·∫°ng th√°i, bi·ªÉu ƒë·ªì ph√¢n b·ªë")
        summ_desc.setFont(QFont("Arial", 9))
        summ_desc.setStyleSheet("color: #666; margin-left: 20px;")
        type_layout.addWidget(summ_desc)

        # Daily reports radio buttons
        self.daily_regional_radio = QRadioButton("üåç B√°o C√°o H√†ng Ng√†y Theo Khu V·ª±c")
        self.daily_regional_radio.setFont(QFont("Arial", 11))
        self.daily_regional_radio.setToolTip("Xu·∫•t b√°o c√°o ti√™u th·ª• h√†ng ng√†y theo khu v·ª±c ƒë·ªãa l√Ω")
        self.report_type_group.addButton(self.daily_regional_radio, 3)
        type_layout.addWidget(self.daily_regional_radio)

        daily_desc = QLabel("   ‚Üí Bao g·ªìm: S·∫£n l∆∞·ª£ng theo khu v·ª±c, xu h∆∞·ªõng ti√™u th·ª•, ph√¢n t√≠ch theo ng√†y")
        daily_desc.setFont(QFont("Arial", 9))
        daily_desc.setStyleSheet("color: #666; margin-left: 20px;")
        type_layout.addWidget(daily_desc)

        self.feed_component_radio = QRadioButton("üåæ B√°o C√°o Th√†nh Ph·∫ßn C√°m")
        self.feed_component_radio.setFont(QFont("Arial", 11))
        self.feed_component_radio.setToolTip("Xu·∫•t b√°o c√°o chi ti·∫øt th√†nh ph·∫ßn c√°m v·ªõi ph√¢n t√≠ch dinh d∆∞·ª°ng")
        self.report_type_group.addButton(self.feed_component_radio, 4)
        type_layout.addWidget(self.feed_component_radio)

        feed_comp_desc = QLabel("   ‚Üí Bao g·ªìm: Th√†nh ph·∫ßn dinh d∆∞·ª°ng, xu h∆∞·ªõng ti√™u th·ª•, so s√°nh c√¥ng th·ª©c")
        feed_comp_desc.setFont(QFont("Arial", 9))
        feed_comp_desc.setStyleSheet("color: #666; margin-left: 20px;")
        type_layout.addWidget(feed_comp_desc)

        self.mix_component_radio = QRadioButton("‚öóÔ∏è B√°o C√°o Th√†nh Ph·∫ßn Mix")
        self.mix_component_radio.setFont(QFont("Arial", 11))
        self.mix_component_radio.setToolTip("Xu·∫•t b√°o c√°o chi ti·∫øt th√†nh ph·∫ßn mix v·ªõi ph√¢n t√≠ch hi·ªáu qu·∫£")
        self.report_type_group.addButton(self.mix_component_radio, 5)
        type_layout.addWidget(self.mix_component_radio)

        mix_comp_desc = QLabel("   ‚Üí Bao g·ªìm: Ch·ª©c nƒÉng ph·ª• gia, li·ªÅu l∆∞·ª£ng khuy·∫øn ngh·ªã, ph√¢n t√≠ch hi·ªáu qu·∫£")
        mix_comp_desc.setFont(QFont("Arial", 9))
        mix_comp_desc.setStyleSheet("color: #666; margin-left: 20px;")
        type_layout.addWidget(mix_comp_desc)

        type_group.setLayout(type_layout)
        tab1_layout.addWidget(type_group)

        # Warehouse selection with enhanced options
        self.options_group = QGroupBox("T√πy Ch·ªçn Kho")
        self.options_group.setFont(QFont("Arial", 12, QFont.Bold))
        options_layout = QVBoxLayout()

        warehouse_layout = QHBoxLayout()

        self.feed_checkbox = QCheckBox("Kho C√°m")
        self.feed_checkbox.setChecked(True)
        self.feed_checkbox.setToolTip("Bao g·ªìm d·ªØ li·ªáu t·ª´ kho nguy√™n li·ªáu c√°m")
        warehouse_layout.addWidget(self.feed_checkbox)

        self.mix_checkbox = QCheckBox("Kho Mix")
        self.mix_checkbox.setChecked(True)
        self.mix_checkbox.setToolTip("Bao g·ªìm d·ªØ li·ªáu t·ª´ kho ph·ª• gia mix")
        warehouse_layout.addWidget(self.mix_checkbox)

        warehouse_layout.addStretch()
        options_layout.addLayout(warehouse_layout)

        self.options_group.setLayout(options_layout)
        tab1_layout.addWidget(self.options_group)

        # Connect events
        self.report_type_group.buttonClicked.connect(self.on_report_type_changed)

        tab1_layout.addStretch()
        tab1.setLayout(tab1_layout)
        self.tab_widget.addTab(tab1, "üìã T√πy Ch·ªçn B√°o C√°o")

    def create_advanced_settings_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t n√¢ng cao"""
        tab2 = QWidget()
        tab2_layout = QVBoxLayout()

        # Performance settings
        perf_group = QGroupBox("C√†i ƒê·∫∑t Hi·ªáu Su·∫•t")
        perf_group.setFont(QFont("Arial", 12, QFont.Bold))
        perf_layout = QVBoxLayout()

        # Cache settings
        cache_layout = QHBoxLayout()
        cache_layout.addWidget(QLabel("Cache d·ªØ li·ªáu:"))

        self.cache_enabled = QCheckBox("B·∫≠t cache ƒë·ªÉ tƒÉng t·ªëc")
        self.cache_enabled.setChecked(True)
        self.cache_enabled.setToolTip("L∆∞u cache d·ªØ li·ªáu ƒë·ªÉ xu·∫•t nhanh h∆°n l·∫ßn sau")
        cache_layout.addWidget(self.cache_enabled)

        clear_cache_btn = QPushButton("X√≥a Cache")
        clear_cache_btn.clicked.connect(self.clear_cache)
        clear_cache_btn.setToolTip("X√≥a cache ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi")
        cache_layout.addWidget(clear_cache_btn)

        cache_layout.addStretch()
        perf_layout.addLayout(cache_layout)

        perf_group.setLayout(perf_layout)
        tab2_layout.addWidget(perf_group)

        # Formatting settings
        format_group = QGroupBox("C√†i ƒê·∫∑t ƒê·ªãnh D·∫°ng")
        format_group.setFont(QFont("Arial", 12, QFont.Bold))
        format_layout = QVBoxLayout()

        self.advanced_formatting = QCheckBox("ƒê·ªãnh d·∫°ng n√¢ng cao (m√†u s·∫Øc, borders, styles)")
        self.advanced_formatting.setChecked(True)
        format_layout.addWidget(self.advanced_formatting)

        self.include_summary = QCheckBox("Bao g·ªìm ph·∫ßn t√≥m t·∫Øt")
        self.include_summary.setChecked(True)
        format_layout.addWidget(self.include_summary)

        self.include_analysis = QCheckBox("Bao g·ªìm ph√¢n t√≠ch chi ti·∫øt")
        self.include_analysis.setChecked(True)
        format_layout.addWidget(self.include_analysis)

        format_group.setLayout(format_layout)
        tab2_layout.addWidget(format_group)

        tab2_layout.addStretch()
        tab2.setLayout(tab2_layout)
        self.tab_widget.addTab(tab2, "‚öôÔ∏è C√†i ƒê·∫∑t N√¢ng Cao")

    def create_recent_exports_tab(self):
        """T·∫°o tab file ƒë√£ xu·∫•t g·∫ßn ƒë√¢y"""
        tab3 = QWidget()
        tab3_layout = QVBoxLayout()

        recent_group = QGroupBox("File ƒê√£ Xu·∫•t G·∫ßn ƒê√¢y")
        recent_group.setFont(QFont("Arial", 12, QFont.Bold))
        recent_layout = QVBoxLayout()

        self.recent_files_list = QTextEdit()
        self.recent_files_list.setMaximumHeight(150)
        self.recent_files_list.setReadOnly(True)
        self.recent_files_list.setStyleSheet("""
            QTextEdit {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 10px;
                font-family: 'Courier New';
                font-size: 9pt;
            }
        """)
        recent_layout.addWidget(self.recent_files_list)

        # Buttons for recent files
        recent_buttons_layout = QHBoxLayout()

        refresh_btn = QPushButton("üîÑ L√†m M·ªõi")
        refresh_btn.clicked.connect(self.load_recent_exports)
        recent_buttons_layout.addWidget(refresh_btn)

        open_folder_btn = QPushButton("üìÅ M·ªü Th∆∞ M·ª•c")
        open_folder_btn.clicked.connect(self.open_export_folder)
        recent_buttons_layout.addWidget(open_folder_btn)

        recent_buttons_layout.addStretch()
        recent_layout.addLayout(recent_buttons_layout)

        recent_group.setLayout(recent_layout)
        tab3_layout.addWidget(recent_group)

        # Export directory info
        info_group = QGroupBox("Th√¥ng Tin Th∆∞ M·ª•c")
        info_group.setFont(QFont("Arial", 12, QFont.Bold))
        info_layout = QVBoxLayout()

        export_dir = self.export_service.get_export_directory()
        dir_info = QLabel(f"üìÅ Th∆∞ m·ª•c xu·∫•t: {export_dir}")
        dir_info.setWordWrap(True)
        dir_info.setStyleSheet("padding: 10px; background-color: #f0f0f0; border-radius: 5px;")
        info_layout.addWidget(dir_info)

        info_group.setLayout(info_layout)
        tab3_layout.addWidget(info_group)

        tab3_layout.addStretch()
        tab3.setLayout(tab3_layout)
        self.tab_widget.addTab(tab3, "üìÖ B√°o C√°o H√†ng Ng√†y")

    def create_daily_reports_tab(self):
        """T·∫°o tab b√°o c√°o h√†ng ng√†y"""
        tab3 = QWidget()
        tab3_layout = QVBoxLayout()

        # Date range selection
        date_group = QGroupBox("Ch·ªçn Kho·∫£ng Th·ªùi Gian")
        date_group.setFont(QFont("Arial", 12, QFont.Bold))
        date_layout = QVBoxLayout()

        # Date range controls
        date_controls_layout = QHBoxLayout()

        date_controls_layout.addWidget(QLabel("T·ª´ ng√†y:"))
        self.start_date = QDateEdit()
        self.start_date.setDate(QDate.currentDate().addDays(-30))
        self.start_date.setCalendarPopup(True)
        self.start_date.setStyleSheet("QDateEdit { padding: 5px; }")
        date_controls_layout.addWidget(self.start_date)

        date_controls_layout.addWidget(QLabel("ƒê·∫øn ng√†y:"))
        self.end_date = QDateEdit()
        self.end_date.setDate(QDate.currentDate())
        self.end_date.setCalendarPopup(True)
        self.end_date.setStyleSheet("QDateEdit { padding: 5px; }")
        date_controls_layout.addWidget(self.end_date)

        # Quick date selection buttons
        quick_date_layout = QHBoxLayout()

        last_7_days_btn = QPushButton("7 ng√†y qua")
        last_7_days_btn.clicked.connect(lambda: self.set_date_range(7))
        quick_date_layout.addWidget(last_7_days_btn)

        last_30_days_btn = QPushButton("30 ng√†y qua")
        last_30_days_btn.clicked.connect(lambda: self.set_date_range(30))
        quick_date_layout.addWidget(last_30_days_btn)

        this_month_btn = QPushButton("Th√°ng n√†y")
        this_month_btn.clicked.connect(self.set_current_month)
        quick_date_layout.addWidget(this_month_btn)

        quick_date_layout.addStretch()

        date_layout.addLayout(date_controls_layout)
        date_layout.addLayout(quick_date_layout)
        date_group.setLayout(date_layout)
        tab3_layout.addWidget(date_group)

        # Region selection
        region_group = QGroupBox("Ch·ªçn Khu V·ª±c")
        region_group.setFont(QFont("Arial", 12, QFont.Bold))
        region_layout = QVBoxLayout()

        # Region selection list
        self.region_list = QListWidget()
        self.region_list.setMaximumHeight(120)
        self.region_list.setSelectionMode(QListWidget.MultiSelection)

        # Add regions
        regions = [
            ("mien_bac", "üèîÔ∏è Mi·ªÅn B·∫Øc"),
            ("mien_trung", "üèñÔ∏è Mi·ªÅn Trung"),
            ("mien_nam", "üå¥ Mi·ªÅn Nam")
        ]

        for region_id, region_name in regions:
            item = QListWidgetItem(region_name)
            item.setData(Qt.UserRole, region_id)
            item.setSelected(True)  # Select all by default
            self.region_list.addItem(item)

        region_layout.addWidget(self.region_list)

        # Region selection buttons
        region_buttons_layout = QHBoxLayout()

        select_all_regions_btn = QPushButton("Ch·ªçn t·∫•t c·∫£")
        select_all_regions_btn.clicked.connect(self.select_all_regions)
        region_buttons_layout.addWidget(select_all_regions_btn)

        clear_regions_btn = QPushButton("B·ªè ch·ªçn t·∫•t c·∫£")
        clear_regions_btn.clicked.connect(self.clear_all_regions)
        region_buttons_layout.addWidget(clear_regions_btn)

        region_buttons_layout.addStretch()

        region_layout.addLayout(region_buttons_layout)
        region_group.setLayout(region_layout)
        tab3_layout.addWidget(region_group)

        # Component selection for daily reports
        component_group = QGroupBox("T√πy Ch·ªçn Th√†nh Ph·∫ßn")
        component_group.setFont(QFont("Arial", 12, QFont.Bold))
        component_layout = QVBoxLayout()

        self.daily_include_feed = QCheckBox("Bao g·ªìm th√†nh ph·∫ßn c√°m")
        self.daily_include_feed.setChecked(True)
        self.daily_include_feed.setToolTip("Bao g·ªìm ph√¢n t√≠ch th√†nh ph·∫ßn c√°m trong b√°o c√°o")
        component_layout.addWidget(self.daily_include_feed)

        self.daily_include_mix = QCheckBox("Bao g·ªìm th√†nh ph·∫ßn mix")
        self.daily_include_mix.setChecked(True)
        self.daily_include_mix.setToolTip("Bao g·ªìm ph√¢n t√≠ch th√†nh ph·∫ßn mix trong b√°o c√°o")
        component_layout.addWidget(self.daily_include_mix)

        self.include_trends = QCheckBox("Bao g·ªìm ph√¢n t√≠ch xu h∆∞·ªõng")
        self.include_trends.setChecked(True)
        self.include_trends.setToolTip("Th√™m bi·ªÉu ƒë·ªì v√† ph√¢n t√≠ch xu h∆∞·ªõng ti√™u th·ª•")
        component_layout.addWidget(self.include_trends)

        self.include_cost_analysis = QCheckBox("Bao g·ªìm ph√¢n t√≠ch chi ph√≠")
        self.include_cost_analysis.setChecked(True)
        self.include_cost_analysis.setToolTip("Th√™m ph√¢n t√≠ch chi ph√≠ nguy√™n li·ªáu")
        component_layout.addWidget(self.include_cost_analysis)

        component_group.setLayout(component_layout)
        tab3_layout.addWidget(component_group)

        # Preview section
        preview_group = QGroupBox("Xem Tr∆∞·ªõc D·ªØ Li·ªáu")
        preview_group.setFont(QFont("Arial", 12, QFont.Bold))
        preview_layout = QVBoxLayout()

        self.data_preview = QTextEdit()
        self.data_preview.setMaximumHeight(100)
        self.data_preview.setReadOnly(True)
        self.data_preview.setStyleSheet("""
            QTextEdit {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 5px;
                font-family: 'Courier New';
                font-size: 9pt;
            }
        """)
        self.data_preview.setText("Ch·ªçn kho·∫£ng th·ªùi gian v√† nh·∫•n 'Xem tr∆∞·ªõc' ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu...")
        preview_layout.addWidget(self.data_preview)

        preview_btn = QPushButton("üîç Xem Tr∆∞·ªõc D·ªØ Li·ªáu")
        preview_btn.clicked.connect(self.preview_daily_data)
        preview_layout.addWidget(preview_btn)

        preview_group.setLayout(preview_layout)
        tab3_layout.addWidget(preview_group)

        tab3_layout.addStretch()
        tab3.setLayout(tab3_layout)
        self.tab_widget.addTab(tab3, "üìÖ B√°o C√°o H√†ng Ng√†y")

    def create_recent_exports_tab(self):
        """T·∫°o tab file ƒë√£ xu·∫•t g·∫ßn ƒë√¢y"""
        tab4 = QWidget()
        tab4_layout = QVBoxLayout()

        recent_group = QGroupBox("File ƒê√£ Xu·∫•t G·∫ßn ƒê√¢y")
        recent_group.setFont(QFont("Arial", 12, QFont.Bold))
        recent_layout = QVBoxLayout()

        self.recent_files_list = QTextEdit()
        self.recent_files_list.setMaximumHeight(150)
        self.recent_files_list.setReadOnly(True)
        self.recent_files_list.setStyleSheet("""
            QTextEdit {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 10px;
                font-family: 'Courier New';
                font-size: 9pt;
            }
        """)
        recent_layout.addWidget(self.recent_files_list)

        # Buttons for recent files
        recent_buttons_layout = QHBoxLayout()

        refresh_btn = QPushButton("üîÑ L√†m M·ªõi")
        refresh_btn.clicked.connect(self.load_recent_exports)
        recent_buttons_layout.addWidget(refresh_btn)

        open_folder_btn = QPushButton("üìÅ M·ªü Th∆∞ M·ª•c")
        open_folder_btn.clicked.connect(self.open_export_folder)
        recent_buttons_layout.addWidget(open_folder_btn)

        recent_buttons_layout.addStretch()
        recent_layout.addLayout(recent_buttons_layout)

        recent_group.setLayout(recent_layout)
        tab4_layout.addWidget(recent_group)

        # Export directory info
        info_group = QGroupBox("Th√¥ng Tin Th∆∞ M·ª•c")
        info_group.setFont(QFont("Arial", 12, QFont.Bold))
        info_layout = QVBoxLayout()

        export_dir = self.export_service.get_export_directory()
        dir_info = QLabel(f"üìÅ Th∆∞ m·ª•c xu·∫•t: {export_dir}")
        dir_info.setWordWrap(True)
        dir_info.setStyleSheet("padding: 10px; background-color: #f0f0f0; border-radius: 5px;")
        info_layout.addWidget(dir_info)

        info_group.setLayout(info_layout)
        tab4_layout.addWidget(info_group)

        tab4_layout.addStretch()
        tab4.setLayout(tab4_layout)
        self.tab_widget.addTab(tab4, "üìÑ File G·∫ßn ƒê√¢y")

    def create_enhanced_progress_section(self, layout):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã ti·∫øn tr√¨nh n√¢ng cao"""
        self.progress_frame = QFrame()
        self.progress_frame.setVisible(False)
        progress_layout = QVBoxLayout()

        # Enhanced progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #ddd;
                border-radius: 8px;
                text-align: center;
                font-weight: bold;
                height: 25px;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4CAF50, stop:1 #8BC34A);
                border-radius: 6px;
            }
        """)
        progress_layout.addWidget(self.progress_bar)

        # Status with icon
        self.status_label = QLabel("")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("""
            QLabel {
                color: #666;
                font-style: italic;
                padding: 5px;
                background-color: #f9f9f9;
                border-radius: 5px;
            }
        """)
        progress_layout.addWidget(self.status_label)

        self.progress_frame.setLayout(progress_layout)
        layout.addWidget(self.progress_frame)

    def create_performance_section(self, layout):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã th√¥ng tin hi·ªáu su·∫•t"""
        self.perf_frame = QFrame()
        self.perf_frame.setVisible(False)
        perf_layout = QHBoxLayout()

        self.perf_time_label = QLabel("‚è±Ô∏è Th·ªùi gian: --")
        self.perf_time_label.setStyleSheet("color: #2196F3; font-weight: bold;")
        perf_layout.addWidget(self.perf_time_label)

        self.perf_items_label = QLabel("üìä S·ªë m·ª•c: --")
        self.perf_items_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
        perf_layout.addWidget(self.perf_items_label)

        perf_layout.addStretch()

        self.perf_frame.setLayout(perf_layout)
        layout.addWidget(self.perf_frame)

    def create_enhanced_buttons_section(self, layout):
        """T·∫°o ph·∫ßn n√∫t b·∫•m n√¢ng cao"""
        button_layout = QHBoxLayout()

        # Quick export buttons
        quick_layout = QVBoxLayout()
        quick_label = QLabel("Xu·∫•t Nhanh:")
        quick_label.setFont(QFont("Arial", 9, QFont.Bold))
        quick_layout.addWidget(quick_label)

        quick_buttons_layout = QHBoxLayout()

        quick_inv_btn = QPushButton("üì¶")
        quick_inv_btn.setToolTip("Xu·∫•t nhanh b√°o c√°o t·ªìn kho")
        quick_inv_btn.setMaximumWidth(40)
        quick_inv_btn.clicked.connect(lambda: self.quick_export("inventory"))
        quick_buttons_layout.addWidget(quick_inv_btn)

        quick_form_btn = QPushButton("üß™")
        quick_form_btn.setToolTip("Xu·∫•t nhanh b√°o c√°o c√¥ng th·ª©c")
        quick_form_btn.setMaximumWidth(40)
        quick_form_btn.clicked.connect(lambda: self.quick_export("formula"))
        quick_buttons_layout.addWidget(quick_form_btn)

        quick_summ_btn = QPushButton("üìà")
        quick_summ_btn.setToolTip("Xu·∫•t nhanh b√°o c√°o t·ªïng h·ª£p")
        quick_summ_btn.setMaximumWidth(40)
        quick_summ_btn.clicked.connect(lambda: self.quick_export("summary"))
        quick_buttons_layout.addWidget(quick_summ_btn)

        quick_daily_btn = QPushButton("üåç")
        quick_daily_btn.setToolTip("Xu·∫•t nhanh b√°o c√°o h√†ng ng√†y theo khu v·ª±c")
        quick_daily_btn.setMaximumWidth(40)
        quick_daily_btn.clicked.connect(lambda: self.quick_export("daily_regional"))
        quick_buttons_layout.addWidget(quick_daily_btn)

        quick_feed_comp_btn = QPushButton("üåæ")
        quick_feed_comp_btn.setToolTip("Xu·∫•t nhanh b√°o c√°o th√†nh ph·∫ßn c√°m")
        quick_feed_comp_btn.setMaximumWidth(40)
        quick_feed_comp_btn.clicked.connect(lambda: self.quick_export("feed_component"))
        quick_buttons_layout.addWidget(quick_feed_comp_btn)

        quick_mix_comp_btn = QPushButton("‚öóÔ∏è")
        quick_mix_comp_btn.setToolTip("Xu·∫•t nhanh b√°o c√°o th√†nh ph·∫ßn mix")
        quick_mix_comp_btn.setMaximumWidth(40)
        quick_mix_comp_btn.clicked.connect(lambda: self.quick_export("mix_component"))
        quick_buttons_layout.addWidget(quick_mix_comp_btn)

        quick_layout.addLayout(quick_buttons_layout)
        button_layout.addLayout(quick_layout)

        button_layout.addStretch()

        # Main export button
        self.export_button = QPushButton("üöÄ Xu·∫•t B√°o C√°o T·ªëi ∆Øu")
        self.export_button.setFont(QFont("Arial", 12, QFont.Bold))
        self.export_button.setMinimumHeight(45)
        self.export_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #4CAF50, stop:1 #45a049);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #45a049, stop:1 #3d8b40);
            }
            QPushButton:disabled {
                background: #cccccc;
            }
        """)
        self.export_button.clicked.connect(self.start_export)
        button_layout.addWidget(self.export_button)

        # Cancel button
        cancel_button = QPushButton("H·ªßy")
        cancel_button.setFont(QFont("Arial", 11))
        cancel_button.setMinimumHeight(45)
        cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
        """)
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(cancel_button)

        layout.addLayout(button_layout)

    def set_default_type(self):
        """ƒê·∫∑t lo·∫°i b√°o c√°o m·∫∑c ƒë·ªãnh"""
        if self.default_type == "formula":
            self.formula_radio.setChecked(True)
        elif self.default_type == "summary":
            self.summary_radio.setChecked(True)
        else:
            self.inventory_radio.setChecked(True)

        self.on_report_type_changed()

    def on_report_type_changed(self):
        """X·ª≠ l√Ω khi thay ƒë·ªïi lo·∫°i b√°o c√°o"""
        # B√°o c√°o t·ªïng h·ª£p kh√¥ng c·∫ßn t√πy ch·ªçn kho
        if self.summary_radio.isChecked():
            self.options_group.setEnabled(False)
            self.perf_indicator.setText("üìà B√°o c√°o t·ªïng h·ª£p - Ph√¢n t√≠ch to√†n di·ªán")
        elif self.formula_radio.isChecked():
            self.options_group.setEnabled(True)
            self.perf_indicator.setText("üß™ B√°o c√°o c√¥ng th·ª©c - Ph√¢n t√≠ch s·∫£n xu·∫•t")
        elif self.daily_regional_radio.isChecked():
            self.options_group.setEnabled(False)
            self.perf_indicator.setText("üåç B√°o c√°o h√†ng ng√†y - Ph√¢n t√≠ch theo khu v·ª±c")
        elif self.feed_component_radio.isChecked():
            self.options_group.setEnabled(False)
            self.perf_indicator.setText("üåæ B√°o c√°o th√†nh ph·∫ßn c√°m - Ph√¢n t√≠ch dinh d∆∞·ª°ng")
        elif self.mix_component_radio.isChecked():
            self.options_group.setEnabled(False)
            self.perf_indicator.setText("‚öóÔ∏è B√°o c√°o th√†nh ph·∫ßn mix - Ph√¢n t√≠ch hi·ªáu qu·∫£")
        else:
            self.options_group.setEnabled(True)
            self.perf_indicator.setText("üì¶ B√°o c√°o t·ªìn kho - Theo d√µi nguy√™n li·ªáu")

    def get_export_type(self):
        """L·∫•y lo·∫°i b√°o c√°o ƒë∆∞·ª£c ch·ªçn"""
        if self.formula_radio.isChecked():
            return "formula"
        elif self.summary_radio.isChecked():
            return "summary"
        elif self.daily_regional_radio.isChecked():
            return "daily_regional"
        elif self.feed_component_radio.isChecked():
            return "feed_component"
        elif self.mix_component_radio.isChecked():
            return "mix_component"
        else:
            return "inventory"

    def get_export_options(self):
        """L·∫•y t√πy ch·ªçn xu·∫•t n√¢ng cao"""
        options = {
            'include_feed': self.feed_checkbox.isChecked(),
            'include_mix': self.mix_checkbox.isChecked(),
            'cache_enabled': self.cache_enabled.isChecked(),
            'advanced_formatting': self.advanced_formatting.isChecked(),
            'include_summary': self.include_summary.isChecked(),
            'include_analysis': self.include_analysis.isChecked()
        }

        # Add daily report specific options
        if hasattr(self, 'daily_include_feed'):
            options.update({
                'daily_include_feed': self.daily_include_feed.isChecked(),
                'daily_include_mix': self.daily_include_mix.isChecked(),
                'include_trends': self.include_trends.isChecked(),
                'include_cost_analysis': self.include_cost_analysis.isChecked(),
                'start_date': self.start_date.date().toPyDate(),
                'end_date': self.end_date.date().toPyDate(),
                'selected_regions': self.get_selected_regions()
            })

        return options

    def validate_options(self):
        """Ki·ªÉm tra t√πy ch·ªçn n√¢ng cao"""
        export_type = self.get_export_type()

        # Validate traditional reports
        if export_type in ["inventory", "formula"]:
            if not (self.feed_checkbox.isChecked() or self.mix_checkbox.isChecked()):
                QMessageBox.warning(self, "C·∫£nh b√°o",
                                  "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kho ƒë·ªÉ xu·∫•t!\n\n"
                                  "üí° M·∫πo: B·∫°n c√≥ th·ªÉ ch·ªçn c·∫£ hai kho ƒë·ªÉ c√≥ b√°o c√°o ƒë·∫ßy ƒë·ªß.")
                return False

        # Validate daily reports
        elif export_type in ["daily_regional", "feed_component", "mix_component"]:
            # Check date range
            start_date = self.start_date.date().toPyDate()
            end_date = self.end_date.date().toPyDate()

            if start_date > end_date:
                QMessageBox.warning(self, "C·∫£nh b√°o",
                                  "Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c!\n\n"
                                  "üí° Vui l√≤ng ch·ªçn l·∫°i kho·∫£ng th·ªùi gian.")
                return False

            # Check date range not too large
            date_diff = (end_date - start_date).days
            if date_diff > 365:
                reply = QMessageBox.question(self, "X√°c nh·∫≠n",
                                           f"Kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn l√† {date_diff} ng√†y.\n"
                                           "B√°o c√°o c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian ƒë·ªÉ t·∫°o.\n\n"
                                           "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?",
                                           QMessageBox.Yes | QMessageBox.No,
                                           QMessageBox.No)
                if reply == QMessageBox.No:
                    return False

            # Check regions selected
            selected_regions = self.get_selected_regions()
            if not selected_regions:
                QMessageBox.warning(self, "C·∫£nh b√°o",
                                  "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt khu v·ª±c!\n\n"
                                  "üí° M·∫πo: Ch·ªçn 'Ch·ªçn t·∫•t c·∫£' ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ khu v·ª±c.")
                return False

            # Check components for daily regional reports
            if export_type == "daily_regional":
                if not (self.daily_include_feed.isChecked() or self.daily_include_mix.isChecked()):
                    QMessageBox.warning(self, "C·∫£nh b√°o",
                                      "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i th√†nh ph·∫ßn!\n\n"
                                      "üí° Ch·ªçn 'Bao g·ªìm th√†nh ph·∫ßn c√°m' ho·∫∑c 'Bao g·ªìm th√†nh ph·∫ßn mix'.")
                    return False

        return True

    def quick_export(self, export_type):
        """Xu·∫•t nhanh v·ªõi c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh"""
        # Set export type
        if export_type == "inventory":
            self.inventory_radio.setChecked(True)
        elif export_type == "formula":
            self.formula_radio.setChecked(True)
        elif export_type == "summary":
            self.summary_radio.setChecked(True)

        self.on_report_type_changed()

        # Start export immediately
        self.start_export()

    def start_export(self):
        """B·∫Øt ƒë·∫ßu xu·∫•t b√°o c√°o v·ªõi t√≠nh nƒÉng n√¢ng cao"""
        if not self.validate_options():
            return

        # Update UI for export mode
        self.export_button.setEnabled(False)
        self.progress_frame.setVisible(True)
        self.perf_frame.setVisible(True)
        self.progress_bar.setValue(0)

        # Update performance indicator
        self.perf_indicator.setText("üîÑ ƒêang x·ª≠ l√Ω...")

        # Get export parameters
        export_type = self.get_export_type()
        export_options = self.get_export_options()

        # Clear cache if disabled
        if not export_options.get('cache_enabled', True):
            self.export_service.clear_cache()

        # Create and start enhanced worker thread
        self.worker_thread = EnhancedExportWorker(self.export_service, export_type, export_options)
        self.worker_thread.progress_updated.connect(self.on_progress_updated)
        self.worker_thread.status_updated.connect(self.on_status_updated)
        self.worker_thread.performance_stats.connect(self.on_performance_stats)
        self.worker_thread.export_completed.connect(self.on_export_completed)
        self.worker_thread.start()

    def on_progress_updated(self, progress):
        """C·∫≠p nh·∫≠t progress bar v·ªõi animation"""
        self.progress_bar.setValue(progress)

        # Update progress bar color based on progress
        if progress < 30:
            color = "#FF9800"  # Orange
        elif progress < 70:
            color = "#2196F3"  # Blue
        else:
            color = "#4CAF50"  # Green

        self.progress_bar.setStyleSheet(f"""
            QProgressBar {{
                border: 2px solid #ddd;
                border-radius: 8px;
                text-align: center;
                font-weight: bold;
                height: 25px;
            }}
            QProgressBar::chunk {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {color}, stop:1 {color});
                border-radius: 6px;
            }}
        """)

    def on_status_updated(self, status):
        """C·∫≠p nh·∫≠t status v·ªõi icon ƒë·ªông"""
        icons = ["‚è≥", "üîÑ", "‚ö°", "‚ú®"]
        import random
        icon = random.choice(icons)
        self.status_label.setText(f"{icon} {status}")

    def on_performance_stats(self, stats):
        """Hi·ªÉn th·ªã th·ªëng k√™ hi·ªáu su·∫•t"""
        processing_time = stats.get('processing_time', 0)
        self.perf_time_label.setText(f"‚è±Ô∏è Th·ªùi gian: {processing_time}s")

        # Store stats for history
        self.performance_stats.append(stats)

    def on_export_completed(self, success, message):
        """X·ª≠ l√Ω khi xu·∫•t xong v·ªõi enhanced feedback"""
        # Re-enable UI
        self.export_button.setEnabled(True)
        self.progress_frame.setVisible(False)

        if success:
            # Update performance indicator
            self.perf_indicator.setText("‚úÖ Xu·∫•t b√°o c√°o th√†nh c√¥ng!")

            # Enhanced success dialog
            reply = QMessageBox.question(
                self,
                "üéâ Xu·∫•t B√°o C√°o Th√†nh C√¥ng",
                f"{message}\n\n"
                "üéØ T√≠nh nƒÉng ƒë√£ s·ª≠ d·ª•ng:\n"
                f"‚Ä¢ ƒê·ªãnh d·∫°ng n√¢ng cao: {'‚úÖ' if self.advanced_formatting.isChecked() else '‚ùå'}\n"
                f"‚Ä¢ Ph√¢n t√≠ch chi ti·∫øt: {'‚úÖ' if self.include_analysis.isChecked() else '‚ùå'}\n"
                f"‚Ä¢ Cache d·ªØ li·ªáu: {'‚úÖ' if self.cache_enabled.isChecked() else '‚ùå'}\n\n"
                "B·∫°n c√≥ mu·ªën m·ªü th∆∞ m·ª•c ch·ª©a file kh√¥ng?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )

            if reply == QMessageBox.Yes:
                self.open_export_folder()

            # Refresh recent files
            self.load_recent_exports()

            self.accept()
        else:
            self.perf_indicator.setText("‚ùå Xu·∫•t b√°o c√°o th·∫•t b·∫°i")

            # Enhanced error dialog
            error_dialog = QMessageBox(self)
            error_dialog.setIcon(QMessageBox.Critical)
            error_dialog.setWindowTitle("‚ùå L·ªói Xu·∫•t B√°o C√°o")
            error_dialog.setText("Xu·∫•t b√°o c√°o th·∫•t b·∫°i!")
            error_dialog.setDetailedText(f"Chi ti·∫øt l·ªói:\n{message}\n\n"
                                       "üí° G·ª£i √Ω kh·∫Øc ph·ª•c:\n"
                                       "‚Ä¢ Ki·ªÉm tra quy·ªÅn ghi file\n"
                                       "‚Ä¢ ƒê·∫£m b·∫£o ƒë·ªß dung l∆∞·ª£ng ·ªï c·ª©ng\n"
                                       "‚Ä¢ Th·ª≠ t·∫Øt cache v√† xu·∫•t l·∫°i\n"
                                       "‚Ä¢ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o")
            error_dialog.exec_()

    def clear_cache(self):
        """X√≥a cache v·ªõi feedback"""
        self.export_service.clear_cache()
        QMessageBox.information(self, "Th√¥ng b√°o",
                              "‚úÖ ƒê√£ x√≥a cache th√†nh c√¥ng!\n\n"
                              "L·∫ßn xu·∫•t ti·∫øp theo s·∫Ω t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi t·ª´ file.")

    def load_recent_exports(self):
        """T·∫£i danh s√°ch file ƒë√£ xu·∫•t g·∫ßn ƒë√¢y"""
        try:
            recent_files = self.export_service.list_exported_files()

            if recent_files:
                files_text = "üìÑ File ƒë√£ xu·∫•t g·∫ßn ƒë√¢y:\n\n"
                for i, filename in enumerate(recent_files[:10], 1):
                    # Parse filename for info
                    if "ton_kho" in filename:
                        icon = "üì¶"
                        type_name = "T·ªìn kho"
                    elif "cong_thuc" in filename:
                        icon = "üß™"
                        type_name = "C√¥ng th·ª©c"
                    elif "tong_hop" in filename:
                        icon = "üìà"
                        type_name = "T·ªïng h·ª£p"
                    else:
                        icon = "üìÑ"
                        type_name = "Kh√°c"

                    files_text += f"{i:2d}. {icon} {type_name}: {filename}\n"

                if len(recent_files) > 10:
                    files_text += f"\n... v√† {len(recent_files) - 10} file kh√°c"
            else:
                files_text = "üì≠ Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c xu·∫•t.\n\nH√£y th·ª≠ xu·∫•t b√°o c√°o ƒë·∫ßu ti√™n!"

            self.recent_files_list.setText(files_text)

        except Exception as e:
            self.recent_files_list.setText(f"‚ùå L·ªói t·∫£i danh s√°ch file: {str(e)}")

    def open_export_folder(self):
        """M·ªü th∆∞ m·ª•c ch·ª©a file xu·∫•t v·ªõi error handling"""
        try:
            export_dir = self.export_service.get_export_directory()
            if os.name == 'nt':  # Windows
                os.startfile(export_dir)
            elif os.name == 'posix':  # macOS and Linux
                subprocess.call(['open', export_dir])
        except Exception as e:
            QMessageBox.warning(self, "C·∫£nh b√°o",
                              f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c:\n{str(e)}\n\n"
                              f"üìÅ ƒê∆∞·ªùng d·∫´n th·ªß c√¥ng:\n{export_dir}")

    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng dialog v·ªõi confirmation"""
        if self.worker_thread and self.worker_thread.isRunning():
            reply = QMessageBox.question(
                self,
                "‚ö†Ô∏è X√°c Nh·∫≠n ƒê√≥ng",
                "ƒêang c√≥ ti·∫øn tr√¨nh xu·∫•t b√°o c√°o ƒëang ch·∫°y.\n\n"
                "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy v√† ƒë√≥ng dialog?\n\n"
                "‚ö†Ô∏è L∆∞u √Ω: Ti·∫øn tr√¨nh xu·∫•t s·∫Ω b·ªã d·ª´ng v√† file c√≥ th·ªÉ kh√¥ng ho√†n ch·ªânh.",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                self.worker_thread.terminate()
                self.worker_thread.wait()
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()

    # Daily reports helper methods
    def set_date_range(self, days: int):
        """ƒê·∫∑t kho·∫£ng th·ªùi gian nhanh"""
        end_date = QDate.currentDate()
        start_date = end_date.addDays(-days)

        self.start_date.setDate(start_date)
        self.end_date.setDate(end_date)

    def set_current_month(self):
        """ƒê·∫∑t th√°ng hi·ªán t·∫°i"""
        current_date = QDate.currentDate()
        start_of_month = QDate(current_date.year(), current_date.month(), 1)

        self.start_date.setDate(start_of_month)
        self.end_date.setDate(current_date)

    def select_all_regions(self):
        """Ch·ªçn t·∫•t c·∫£ khu v·ª±c"""
        for i in range(self.region_list.count()):
            item = self.region_list.item(i)
            item.setSelected(True)

    def clear_all_regions(self):
        """B·ªè ch·ªçn t·∫•t c·∫£ khu v·ª±c"""
        for i in range(self.region_list.count()):
            item = self.region_list.item(i)
            item.setSelected(False)

    def get_selected_regions(self) -> List[str]:
        """L·∫•y danh s√°ch khu v·ª±c ƒë∆∞·ª£c ch·ªçn"""
        selected_regions = []
        for i in range(self.region_list.count()):
            item = self.region_list.item(i)
            if item.isSelected():
                region_id = item.data(Qt.UserRole)
                selected_regions.append(region_id)
        return selected_regions

    def preview_daily_data(self):
        """Xem tr∆∞·ªõc d·ªØ li·ªáu h√†ng ng√†y"""
        try:
            start_date = self.start_date.date().toPyDate()
            end_date = self.end_date.date().toPyDate()
            selected_regions = self.get_selected_regions()

            if not selected_regions:
                self.data_preview.setText("‚ùå Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt khu v·ª±c")
                return

            # Load sample data for preview
            from datetime import datetime
            daily_data = self.export_service._load_daily_consumption_data(
                datetime.combine(start_date, datetime.min.time()),
                datetime.combine(end_date, datetime.min.time())
            )

            if not daily_data:
                self.data_preview.setText("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn")
                return

            # Create preview text
            preview_text = f"üìÖ Kho·∫£ng th·ªùi gian: {start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')}\n"
            preview_text += f"üìä S·ªë ng√†y c√≥ d·ªØ li·ªáu: {len(daily_data)}\n"
            preview_text += f"üåç Khu v·ª±c ƒë∆∞·ª£c ch·ªçn: {len(selected_regions)}\n\n"

            # Sample data from first available day
            if daily_data:
                first_date = min(daily_data.keys())
                first_day_data = daily_data[first_date]

                preview_text += f"üìã D·ªØ li·ªáu m·∫´u ({first_date}):\n"

                for region_id in selected_regions:
                    if region_id in first_day_data.get('regions', {}):
                        region_data = first_day_data['regions'][region_id]
                        region_name = region_data.get('region_name', region_id)
                        production = region_data.get('total_production', 0)

                        preview_text += f"  ‚Ä¢ {region_name}: {production:,.1f} kg\n"

                # Show top feed components
                all_feed_components = {}
                for region_id in selected_regions:
                    if region_id in first_day_data.get('regions', {}):
                        feed_consumption = first_day_data['regions'][region_id].get('feed_consumption', {})
                        for component, amount in feed_consumption.items():
                            if component not in all_feed_components:
                                all_feed_components[component] = 0
                            all_feed_components[component] += amount

                if all_feed_components:
                    preview_text += f"\nüåæ Top 3 th√†nh ph·∫ßn c√°m:\n"
                    sorted_components = sorted(all_feed_components.items(), key=lambda x: x[1], reverse=True)[:3]
                    for component, amount in sorted_components:
                        preview_text += f"  ‚Ä¢ {component}: {amount:.1f} kg\n"

            self.data_preview.setText(preview_text)

        except Exception as e:
            self.data_preview.setText(f"‚ùå L·ªói xem tr∆∞·ªõc d·ªØ li·ªáu: {str(e)}")

    def quick_export(self, export_type):
        """Xu·∫•t nhanh v·ªõi c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh"""
        # Set export type
        if export_type == "inventory":
            self.inventory_radio.setChecked(True)
        elif export_type == "formula":
            self.formula_radio.setChecked(True)
        elif export_type == "summary":
            self.summary_radio.setChecked(True)
        elif export_type == "daily_regional":
            self.daily_regional_radio.setChecked(True)
        elif export_type == "feed_component":
            self.feed_component_radio.setChecked(True)
        elif export_type == "mix_component":
            self.mix_component_radio.setChecked(True)

        self.on_report_type_changed()

        # Start export immediately
        self.start_export()
