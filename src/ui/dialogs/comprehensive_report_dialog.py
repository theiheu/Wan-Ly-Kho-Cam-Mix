#!/usr/bin/env python3
"""
Comprehensive Report Dialog - Dialog b√°o c√°o to√†n di·ªán
Giao di·ªán cho ph√©p ng∆∞·ªùi d√πng ch·ªçn c√°c lo·∫°i b√°o c√°o v√† xu·∫•t Excel
"""

import os
import sys
from datetime import datetime, timedelta
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QGridLayout,
                            QLabel, QPushButton, QCheckBox, QDateEdit, QComboBox,
                            QGroupBox, QProgressBar, QTextEdit, QTabWidget, QWidget,
                            QMessageBox, QFileDialog, QFrame, QScrollArea, QSizePolicy)
from PyQt5.QtCore import Qt, QDate, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPixmap, QIcon

# Import services
try:
    from src.services.comprehensive_report_service import ComprehensiveReportService
    from src.services.excel_export_service import ExcelExportService
    from src.utils.user_preferences import user_preferences_manager
except ImportError:
    from services.comprehensive_report_service import ComprehensiveReportService
    from services.excel_export_service import ExcelExportService
    from utils.user_preferences import user_preferences_manager

class ReportGenerationWorker(QThread):
    """Worker thread ƒë·ªÉ t·∫°o b√°o c√°o kh√¥ng ch·∫∑n UI"""

    progress_updated = pyqtSignal(int)
    status_updated = pyqtSignal(str)
    report_completed = pyqtSignal(bool, str, dict)

    def __init__(self, report_options):
        super().__init__()
        self.report_options = report_options
        self.report_service = ComprehensiveReportService()
        self.excel_service = ExcelExportService()

    def run(self):
        """Ch·∫°y qu√° tr√¨nh t·∫°o b√°o c√°o"""
        try:
            self.status_updated.emit("ƒêang kh·ªüi t·∫°o d·ªãch v·ª• b√°o c√°o...")
            self.progress_updated.emit(10)

            # T·∫°o b√°o c√°o to√†n di·ªán
            self.status_updated.emit("ƒêang thu th·∫≠p d·ªØ li·ªáu...")
            self.progress_updated.emit(30)

            report_data = self.report_service.generate_comprehensive_report(
                include_inventory=self.report_options.get('include_inventory', True),
                include_employees=self.report_options.get('include_employees', True),
                include_production=self.report_options.get('include_production', True),
                include_bonuses=self.report_options.get('include_bonuses', True),
                include_formulas=self.report_options.get('include_formulas', True),
                include_imports=self.report_options.get('include_imports', True),
                start_date=self.report_options.get('start_date'),
                end_date=self.report_options.get('end_date')
            )

            self.progress_updated.emit(70)

            # Xu·∫•t Excel n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if self.report_options.get('export_excel', True):
                self.status_updated.emit("ƒêang xu·∫•t file Excel...")
                self.progress_updated.emit(80)

                filename = self.report_options.get('filename')
                custom_export_dir = self.report_options.get('custom_export_dir')
                success, message = self.excel_service.export_comprehensive_report(
                    report_data,
                    filename,
                    custom_export_dir
                )

                if not success:
                    self.report_completed.emit(False, message, {})
                    return

            self.progress_updated.emit(100)
            self.status_updated.emit("Ho√†n th√†nh!")

            success_message = "B√°o c√°o to√†n di·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
            if self.report_options.get('export_excel', True):
                success_message += f"\nFile Excel ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {self.excel_service.exports_dir}"

            self.report_completed.emit(True, success_message, report_data)

        except Exception as e:
            self.report_completed.emit(False, f"L·ªói khi t·∫°o b√°o c√°o: {str(e)}", {})

class ComprehensiveReportDialog(QDialog):
    """Dialog b√°o c√°o to√†n di·ªán v·ªõi nhi·ªÅu t√πy ch·ªçn"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_app = parent
        self.worker_thread = None

        # Thi·∫øt l·∫≠p dialog
        self.setWindowTitle("B√°o C√°o To√†n Di·ªán - Xu·∫•t Excel")
        self.setModal(True)
        self.resize(700, 600)

        # Kh·ªüi t·∫°o bi·∫øn export folder
        self.export_folder = None

        # Kh·ªüi t·∫°o UI
        self.init_ui()

        # Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh v√† t·∫£i c√†i ƒë·∫∑t ƒë√£ l∆∞u
        self.setup_default_values()
        self.load_user_preferences()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Header
        self.create_header(layout)

        # Tab widget cho c√°c t√πy ch·ªçn
        self.create_tabs(layout)

        # Progress section
        self.create_progress_section(layout)

        # Buttons
        self.create_buttons_section(layout)

        self.setLayout(layout)

    def create_header(self, layout):
        """T·∫°o header v·ªõi ti√™u ƒë·ªÅ v√† m√¥ t·∫£"""
        header_frame = QFrame()
        header_frame.setStyleSheet("""
            QFrame {
                background-color: #E3F2FD;
                border: 2px solid #2196F3;
                border-radius: 10px;
                padding: 10px;
            }
        """)

        header_layout = QVBoxLayout(header_frame)

        # Ti√™u ƒë·ªÅ ch√≠nh
        title_label = QLabel("üìä B√ÅO C√ÅO TO√ÄN DI·ªÜN H·ªÜ TH·ªêNG")
        title_label.setFont(QFont("Arial", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #1976D2; background: transparent; border: none;")
        header_layout.addWidget(title_label)

        # M√¥ t·∫£
        desc_label = QLabel("T·∫°o b√°o c√°o chi ti·∫øt t·ª´ t·∫•t c·∫£ d·ªØ li·ªáu trong h·ªá th·ªëng v√† xu·∫•t ra file Excel")
        desc_label.setFont(QFont("Arial", 11))
        desc_label.setAlignment(Qt.AlignCenter)
        desc_label.setStyleSheet("color: #424242; background: transparent; border: none;")
        header_layout.addWidget(desc_label)

        layout.addWidget(header_frame)

    def create_tabs(self, layout):
        """T·∫°o tab widget cho c√°c t√πy ch·ªçn"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #ddd;
                border-radius: 5px;
                background-color: white;
            }
            QTabBar::tab {
                background: #f0f0f0;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
                font-weight: bold;
            }
            QTabBar::tab:selected {
                background: #2196F3;
                color: white;
            }
        """)

        # Tab 1: Ch·ªçn lo·∫°i b√°o c√°o
        self.create_report_types_tab()

        # Tab 2: Kho·∫£ng th·ªùi gian
        self.create_date_range_tab()

        # Tab 3: T√πy ch·ªçn xu·∫•t
        self.create_export_options_tab()

        layout.addWidget(self.tab_widget)

    def create_report_types_tab(self):
        """T·∫°o tab ch·ªçn lo·∫°i b√°o c√°o"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Nh√≥m ch·ªçn lo·∫°i b√°o c√°o
        report_group = QGroupBox("Ch·ªçn Lo·∫°i B√°o C√°o")
        report_group.setFont(QFont("Arial", 12, QFont.Bold))
        report_layout = QGridLayout(report_group)

        # C√°c checkbox cho t·ª´ng lo·∫°i b√°o c√°o
        self.inventory_cb = QCheckBox("üì¶ B√°o c√°o T·ªìn Kho")
        self.inventory_cb.setToolTip("Bao g·ªìm th√¥ng tin t·ªìn kho c√°m, mix v√† c·∫£nh b√°o")
        self.inventory_cb.setChecked(True)
        report_layout.addWidget(self.inventory_cb, 0, 0)

        self.employees_cb = QCheckBox("üë• B√°o c√°o Nh√¢n Vi√™n")
        self.employees_cb.setToolTip("Bao g·ªìm danh s√°ch nh√¢n vi√™n v√† th·ªëng k√™ ch·∫•m c√¥ng")
        self.employees_cb.setChecked(True)
        report_layout.addWidget(self.employees_cb, 0, 1)

        self.production_cb = QCheckBox("üè≠ B√°o c√°o S·∫£n Xu·∫•t")
        self.production_cb.setToolTip("Bao g·ªìm d·ªØ li·ªáu s·ª≠ d·ª•ng c√°m v√† mix h√†ng ng√†y")
        self.production_cb.setChecked(True)
        report_layout.addWidget(self.production_cb, 1, 0)

        self.bonuses_cb = QCheckBox("üí∞ B√°o c√°o Th∆∞·ªüng")
        self.bonuses_cb.setToolTip("Bao g·ªìm th√¥ng tin t√≠nh th∆∞·ªüng theo th√°ng")
        self.bonuses_cb.setChecked(True)
        report_layout.addWidget(self.bonuses_cb, 1, 1)

        self.formulas_cb = QCheckBox("üß™ B√°o c√°o C√¥ng Th·ª©c")
        self.formulas_cb.setToolTip("Bao g·ªìm c√¥ng th·ª©c c√°m v√† mix")
        self.formulas_cb.setChecked(True)
        report_layout.addWidget(self.formulas_cb, 2, 0)

        self.imports_cb = QCheckBox("üì• B√°o c√°o Nh·∫≠p Kho")
        self.imports_cb.setToolTip("Bao g·ªìm l·ªãch s·ª≠ nh·∫≠p kho")
        self.imports_cb.setChecked(True)
        report_layout.addWidget(self.imports_cb, 2, 1)

        layout.addWidget(report_group)

        # N√∫t preset b√°o c√°o
        preset_group = QGroupBox("Preset B√°o C√°o")
        preset_group.setFont(QFont("Arial", 12, QFont.Bold))
        preset_layout = QGridLayout(preset_group)

        # Preset buttons
        inventory_preset_btn = QPushButton("üì¶ Ch·ªâ T·ªìn Kho")
        inventory_preset_btn.setToolTip("Ch·ªâ xu·∫•t b√°o c√°o t·ªìn kho v√† c·∫£nh b√°o")
        inventory_preset_btn.clicked.connect(self.set_inventory_preset)
        preset_layout.addWidget(inventory_preset_btn, 0, 0)

        production_preset_btn = QPushButton("üè≠ S·∫£n Xu·∫•t")
        production_preset_btn.setToolTip("Xu·∫•t b√°o c√°o s·∫£n xu·∫•t v√† c√¥ng th·ª©c")
        production_preset_btn.clicked.connect(self.set_production_preset)
        preset_layout.addWidget(production_preset_btn, 0, 1)

        employee_preset_btn = QPushButton("üë• Nh√¢n Vi√™n")
        employee_preset_btn.setToolTip("Xu·∫•t b√°o c√°o nh√¢n vi√™n v√† th∆∞·ªüng")
        employee_preset_btn.clicked.connect(self.set_employee_preset)
        preset_layout.addWidget(employee_preset_btn, 1, 0)

        complete_preset_btn = QPushButton("üìã To√†n Di·ªán")
        complete_preset_btn.setToolTip("Xu·∫•t t·∫•t c·∫£ lo·∫°i b√°o c√°o")
        complete_preset_btn.clicked.connect(self.set_complete_preset)
        preset_layout.addWidget(complete_preset_btn, 1, 1)

        layout.addWidget(preset_group)

        # N√∫t ch·ªçn t·∫•t c·∫£ / b·ªè ch·ªçn t·∫•t c·∫£
        buttons_layout = QHBoxLayout()

        select_all_btn = QPushButton("Ch·ªçn T·∫•t C·∫£")
        select_all_btn.clicked.connect(self.select_all_reports)
        buttons_layout.addWidget(select_all_btn)

        deselect_all_btn = QPushButton("B·ªè Ch·ªçn T·∫•t C·∫£")
        deselect_all_btn.clicked.connect(self.deselect_all_reports)
        buttons_layout.addWidget(deselect_all_btn)

        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)

        layout.addStretch()
        self.tab_widget.addTab(tab, "üìã Lo·∫°i B√°o C√°o")

    def create_date_range_tab(self):
        """T·∫°o tab ch·ªçn kho·∫£ng th·ªùi gian"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Nh√≥m kho·∫£ng th·ªùi gian
        date_group = QGroupBox("Kho·∫£ng Th·ªùi Gian")
        date_group.setFont(QFont("Arial", 12, QFont.Bold))
        date_layout = QGridLayout(date_group)

        # Checkbox ƒë·ªÉ b·∫≠t/t·∫Øt l·ªçc theo ng√†y
        self.use_date_filter_cb = QCheckBox("L·ªçc theo kho·∫£ng th·ªùi gian")
        self.use_date_filter_cb.setChecked(False)
        self.use_date_filter_cb.toggled.connect(self.toggle_date_filter)
        date_layout.addWidget(self.use_date_filter_cb, 0, 0, 1, 2)

        # Ng√†y b·∫Øt ƒë·∫ßu
        date_layout.addWidget(QLabel("T·ª´ ng√†y:"), 1, 0)
        self.start_date_edit = QDateEdit()
        self.start_date_edit.setDate(QDate.currentDate().addDays(-30))
        self.start_date_edit.setCalendarPopup(True)
        self.start_date_edit.setEnabled(False)
        date_layout.addWidget(self.start_date_edit, 1, 1)

        # Ng√†y k·∫øt th√∫c
        date_layout.addWidget(QLabel("ƒê·∫øn ng√†y:"), 2, 0)
        self.end_date_edit = QDateEdit()
        self.end_date_edit.setDate(QDate.currentDate())
        self.end_date_edit.setCalendarPopup(True)
        self.end_date_edit.setEnabled(False)
        date_layout.addWidget(self.end_date_edit, 2, 1)

        layout.addWidget(date_group)

        # C√°c preset th·ªùi gian
        preset_group = QGroupBox("Preset Th·ªùi Gian")
        preset_group.setFont(QFont("Arial", 12, QFont.Bold))
        preset_layout = QGridLayout(preset_group)

        # N√∫t preset
        last_7_days_btn = QPushButton("7 ng√†y qua")
        last_7_days_btn.clicked.connect(lambda: self.set_date_preset(7))
        preset_layout.addWidget(last_7_days_btn, 0, 0)

        last_30_days_btn = QPushButton("30 ng√†y qua")
        last_30_days_btn.clicked.connect(lambda: self.set_date_preset(30))
        preset_layout.addWidget(last_30_days_btn, 0, 1)

        last_90_days_btn = QPushButton("90 ng√†y qua")
        last_90_days_btn.clicked.connect(lambda: self.set_date_preset(90))
        preset_layout.addWidget(last_90_days_btn, 1, 0)

        this_month_btn = QPushButton("Th√°ng n√†y")
        this_month_btn.clicked.connect(self.set_this_month)
        preset_layout.addWidget(this_month_btn, 1, 1)

        layout.addWidget(preset_group)
        layout.addStretch()

        self.tab_widget.addTab(tab, "üìÖ Th·ªùi Gian")

    def create_export_options_tab(self):
        """T·∫°o tab t√πy ch·ªçn xu·∫•t"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)

        # Nh√≥m t√πy ch·ªçn xu·∫•t
        export_group = QGroupBox("T√πy Ch·ªçn Xu·∫•t File")
        export_group.setFont(QFont("Arial", 12, QFont.Bold))
        export_layout = QGridLayout(export_group)

        # Checkbox xu·∫•t Excel
        self.export_excel_cb = QCheckBox("Xu·∫•t file Excel (.xlsx)")
        self.export_excel_cb.setChecked(True)
        self.export_excel_cb.setToolTip("T·∫°o file Excel v·ªõi nhi·ªÅu worksheet")
        export_layout.addWidget(self.export_excel_cb, 0, 0, 1, 2)

        # T√™n file
        export_layout.addWidget(QLabel("T√™n file:"), 1, 0)
        self.filename_edit = QComboBox()
        self.filename_edit.setEditable(True)
        self.filename_edit.addItems([
            f"BaoCao_ToanDien_{datetime.now().strftime('%Y%m%d')}",
            f"BaoCao_KhoHang_{datetime.now().strftime('%Y%m%d')}",
            f"BaoCao_SanXuat_{datetime.now().strftime('%Y%m%d')}"
        ])
        export_layout.addWidget(self.filename_edit, 1, 1)

        # N√∫t ch·ªçn th∆∞ m·ª•c v√† reset
        folder_buttons_layout = QHBoxLayout()

        self.folder_btn = QPushButton("üìÅ Ch·ªçn Th∆∞ M·ª•c L∆∞u")
        self.folder_btn.clicked.connect(self.choose_export_folder)
        folder_buttons_layout.addWidget(self.folder_btn)

        self.reset_folder_btn = QPushButton("üîÑ ƒê·∫∑t L·∫°i")
        self.reset_folder_btn.setToolTip("ƒê·∫∑t l·∫°i v·ªÅ th∆∞ m·ª•c m·∫∑c ƒë·ªãnh")
        self.reset_folder_btn.clicked.connect(self.reset_export_folder)
        folder_buttons_layout.addWidget(self.reset_folder_btn)

        export_layout.addLayout(folder_buttons_layout, 2, 0, 1, 2)

        # Hi·ªÉn th·ªã th∆∞ m·ª•c hi·ªán t·∫°i
        self.folder_label = QLabel("Th∆∞ m·ª•c: src/data/exports")
        self.folder_label.setStyleSheet("color: #666; font-style: italic;")
        self.folder_label.setWordWrap(True)  # Cho ph√©p xu·ªëng d√≤ng v·ªõi ƒë∆∞·ªùng d·∫´n d√†i
        export_layout.addWidget(self.folder_label, 3, 0, 1, 2)

        layout.addWidget(export_group)

        # Nh√≥m t√πy ch·ªçn n√¢ng cao
        advanced_group = QGroupBox("T√πy Ch·ªçn N√¢ng Cao")
        advanced_group.setFont(QFont("Arial", 12, QFont.Bold))
        advanced_layout = QVBoxLayout(advanced_group)

        self.open_after_export_cb = QCheckBox("M·ªü file sau khi xu·∫•t")
        self.open_after_export_cb.setChecked(True)
        advanced_layout.addWidget(self.open_after_export_cb)

        self.show_summary_cb = QCheckBox("Hi·ªÉn th·ªã t√≥m t·∫Øt b√°o c√°o")
        self.show_summary_cb.setChecked(True)
        advanced_layout.addWidget(self.show_summary_cb)

        layout.addWidget(advanced_group)
        layout.addStretch()

        self.tab_widget.addTab(tab, "‚öôÔ∏è T√πy Ch·ªçn")

    def create_progress_section(self, layout):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã ti·∫øn tr√¨nh"""
        progress_group = QGroupBox("Ti·∫øn Tr√¨nh")
        progress_group.setFont(QFont("Arial", 12, QFont.Bold))
        progress_layout = QVBoxLayout(progress_group)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        progress_layout.addWidget(self.progress_bar)

        # Status label
        self.status_label = QLabel("S·∫µn s√†ng t·∫°o b√°o c√°o")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666; font-style: italic;")
        progress_layout.addWidget(self.status_label)

        layout.addWidget(progress_group)

    def create_buttons_section(self, layout):
        """T·∫°o ph·∫ßn n√∫t b·∫•m"""
        buttons_layout = QHBoxLayout()

        # N√∫t t·∫°o b√°o c√°o
        self.generate_btn = QPushButton("üöÄ T·∫°o B√°o C√°o")
        self.generate_btn.setFont(QFont("Arial", 12, QFont.Bold))
        self.generate_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        self.generate_btn.clicked.connect(self.generate_report)
        buttons_layout.addWidget(self.generate_btn)

        # N√∫t h·ªßy
        cancel_btn = QPushButton("‚ùå H·ªßy")
        cancel_btn.setFont(QFont("Arial", 12))
        cancel_btn.clicked.connect(self.reject)
        buttons_layout.addWidget(cancel_btn)

        layout.addLayout(buttons_layout)

    def setup_default_values(self):
        """Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh"""
        # Thi·∫øt l·∫≠p ng√†y m·∫∑c ƒë·ªãnh
        self.start_date_edit.setDate(QDate.currentDate().addDays(-30))
        self.end_date_edit.setDate(QDate.currentDate())

    def load_user_preferences(self):
        """T·∫£i c√†i ƒë·∫∑t ng∆∞·ªùi d√πng ƒë√£ l∆∞u"""
        try:
            # T·∫£i ƒë∆∞·ªùng d·∫´n xu·∫•t file ƒë√£ l∆∞u
            saved_export_path = user_preferences_manager.get_export_folder_path()
            if saved_export_path and os.path.exists(saved_export_path):
                self.export_folder = saved_export_path
                self.folder_label.setText(f"Th∆∞ m·ª•c: {saved_export_path}")
            else:
                # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
                self.export_folder = None
                self.folder_label.setText("Th∆∞ m·ª•c: src/data/exports (m·∫∑c ƒë·ªãnh)")

            # T·∫£i c√°c c√†i ƒë·∫∑t kh√°c
            self.open_after_export_cb.setChecked(user_preferences_manager.get_auto_open_after_export())
            self.show_summary_cb.setChecked(user_preferences_manager.get_show_report_summary())

            # T·∫£i c√†i ƒë·∫∑t l·ªçc ng√†y
            if user_preferences_manager.get_default_date_filter():
                self.use_date_filter_cb.setChecked(True)
                self.toggle_date_filter(True)
                days = user_preferences_manager.get_default_date_range_days()
                self.set_date_preset(days)

        except Exception as e:
            print(f"L·ªói khi t·∫£i c√†i ƒë·∫∑t ng∆∞·ªùi d√πng: {e}")

    def save_user_preferences(self):
        """L∆∞u c√†i ƒë·∫∑t ng∆∞·ªùi d√πng hi·ªán t·∫°i"""
        try:
            # L∆∞u ƒë∆∞·ªùng d·∫´n xu·∫•t file
            if self.export_folder:
                user_preferences_manager.set_export_folder_path(self.export_folder)
            else:
                user_preferences_manager.reset_export_folder_path()

            # L∆∞u c√°c c√†i ƒë·∫∑t kh√°c
            user_preferences_manager.set_auto_open_after_export(self.open_after_export_cb.isChecked())
            user_preferences_manager.set_show_report_summary(self.show_summary_cb.isChecked())
            user_preferences_manager.set_default_date_filter(self.use_date_filter_cb.isChecked())

            if self.use_date_filter_cb.isChecked():
                # T√≠nh s·ªë ng√†y gi·ªØa start v√† end date
                start_date = self.start_date_edit.date()
                end_date = self.end_date_edit.date()
                days_diff = start_date.daysTo(end_date)
                if days_diff > 0:
                    user_preferences_manager.set_default_date_range_days(days_diff)

        except Exception as e:
            print(f"L·ªói khi l∆∞u c√†i ƒë·∫∑t ng∆∞·ªùi d√πng: {e}")

    def select_all_reports(self):
        """Ch·ªçn t·∫•t c·∫£ lo·∫°i b√°o c√°o"""
        self.inventory_cb.setChecked(True)
        self.employees_cb.setChecked(True)
        self.production_cb.setChecked(True)
        self.bonuses_cb.setChecked(True)
        self.formulas_cb.setChecked(True)
        self.imports_cb.setChecked(True)

    def deselect_all_reports(self):
        """B·ªè ch·ªçn t·∫•t c·∫£ lo·∫°i b√°o c√°o"""
        self.inventory_cb.setChecked(False)
        self.employees_cb.setChecked(False)
        self.production_cb.setChecked(False)
        self.bonuses_cb.setChecked(False)
        self.formulas_cb.setChecked(False)
        self.imports_cb.setChecked(False)

    def set_inventory_preset(self):
        """Thi·∫øt l·∫≠p preset b√°o c√°o t·ªìn kho"""
        self.deselect_all_reports()
        self.inventory_cb.setChecked(True)
        self.imports_cb.setChecked(True)  # Include imports for inventory tracking

        # Update filename
        self.filename_edit.setEditText(f"BaoCao_TonKho_{datetime.now().strftime('%Y%m%d')}")

    def set_production_preset(self):
        """Thi·∫øt l·∫≠p preset b√°o c√°o s·∫£n xu·∫•t"""
        self.deselect_all_reports()
        self.production_cb.setChecked(True)
        self.formulas_cb.setChecked(True)
        self.inventory_cb.setChecked(True)  # Include inventory for production planning

        # Update filename
        self.filename_edit.setEditText(f"BaoCao_SanXuat_{datetime.now().strftime('%Y%m%d')}")

        # Set date filter to last 30 days for production reports
        self.use_date_filter_cb.setChecked(True)
        self.toggle_date_filter(True)
        self.set_date_preset(30)

    def set_employee_preset(self):
        """Thi·∫øt l·∫≠p preset b√°o c√°o nh√¢n vi√™n"""
        self.deselect_all_reports()
        self.employees_cb.setChecked(True)
        self.bonuses_cb.setChecked(True)

        # Update filename
        self.filename_edit.setEditText(f"BaoCao_NhanVien_{datetime.now().strftime('%Y%m%d')}")

    def set_complete_preset(self):
        """Thi·∫øt l·∫≠p preset b√°o c√°o to√†n di·ªán"""
        self.select_all_reports()

        # Update filename
        self.filename_edit.setEditText(f"BaoCao_ToanDien_{datetime.now().strftime('%Y%m%d')}")

    def toggle_date_filter(self, enabled):
        """B·∫≠t/t·∫Øt l·ªçc theo ng√†y"""
        self.start_date_edit.setEnabled(enabled)
        self.end_date_edit.setEnabled(enabled)

    def set_date_preset(self, days):
        """Thi·∫øt l·∫≠p preset ng√†y"""
        self.use_date_filter_cb.setChecked(True)
        self.toggle_date_filter(True)
        self.start_date_edit.setDate(QDate.currentDate().addDays(-days))
        self.end_date_edit.setDate(QDate.currentDate())

    def set_this_month(self):
        """Thi·∫øt l·∫≠p th√°ng hi·ªán t·∫°i"""
        self.use_date_filter_cb.setChecked(True)
        self.toggle_date_filter(True)
        current_date = QDate.currentDate()
        first_day = QDate(current_date.year(), current_date.month(), 1)
        self.start_date_edit.setDate(first_day)
        self.end_date_edit.setDate(current_date)

    def choose_export_folder(self):
        """Ch·ªçn th∆∞ m·ª•c xu·∫•t file"""
        # B·∫Øt ƒë·∫ßu t·ª´ th∆∞ m·ª•c hi·ªán t·∫°i ho·∫∑c th∆∞ m·ª•c m·∫∑c ƒë·ªãnh
        start_dir = self.export_folder if self.export_folder else "src/data/exports"

        folder = QFileDialog.getExistingDirectory(
            self,
            "Ch·ªçn Th∆∞ M·ª•c L∆∞u File",
            start_dir
        )

        if folder:
            self.export_folder = folder
            self.folder_label.setText(f"Th∆∞ m·ª•c: {folder}")

            # L∆∞u ngay v√†o c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
            user_preferences_manager.set_export_folder_path(folder)
            print(f"ƒê√£ l∆∞u ƒë∆∞·ªùng d·∫´n xu·∫•t file: {folder}")

    def reset_export_folder(self):
        """ƒê·∫∑t l·∫°i th∆∞ m·ª•c xu·∫•t file v·ªÅ m·∫∑c ƒë·ªãnh"""
        self.export_folder = None
        self.folder_label.setText("Th∆∞ m·ª•c: src/data/exports (m·∫∑c ƒë·ªãnh)")

        # X√≥a ƒë∆∞·ªùng d·∫´n ƒë√£ l∆∞u
        user_preferences_manager.reset_export_folder_path()
        print("ƒê√£ ƒë·∫∑t l·∫°i ƒë∆∞·ªùng d·∫´n xu·∫•t file v·ªÅ m·∫∑c ƒë·ªãnh")

    def generate_report(self):
        """T·∫°o b√°o c√°o"""
        # Ki·ªÉm tra √≠t nh·∫•t m·ªôt lo·∫°i b√°o c√°o ƒë∆∞·ª£c ch·ªçn
        if not any([
            self.inventory_cb.isChecked(),
            self.employees_cb.isChecked(),
            self.production_cb.isChecked(),
            self.bonuses_cb.isChecked(),
            self.formulas_cb.isChecked(),
            self.imports_cb.isChecked()
        ]):
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i b√°o c√°o!")
            return

        # Chu·∫©n b·ªã t√πy ch·ªçn b√°o c√°o
        report_options = {
            'include_inventory': self.inventory_cb.isChecked(),
            'include_employees': self.employees_cb.isChecked(),
            'include_production': self.production_cb.isChecked(),
            'include_bonuses': self.bonuses_cb.isChecked(),
            'include_formulas': self.formulas_cb.isChecked(),
            'include_imports': self.imports_cb.isChecked(),
            'export_excel': self.export_excel_cb.isChecked(),
            'filename': self.filename_edit.currentText(),
            'custom_export_dir': self.export_folder
        }

        # Th√™m kho·∫£ng th·ªùi gian n·∫øu ƒë∆∞·ª£c ch·ªçn
        if self.use_date_filter_cb.isChecked():
            start_date = self.start_date_edit.date().toString('yyyyMMdd')
            end_date = self.end_date_edit.date().toString('yyyyMMdd')
            report_options['start_date'] = start_date
            report_options['end_date'] = end_date

        # B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o
        self.start_report_generation(report_options)

    def start_report_generation(self, report_options):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o b√°o c√°o"""
        # V√¥ hi·ªáu h√≥a n√∫t t·∫°o b√°o c√°o
        self.generate_btn.setEnabled(False)
        self.generate_btn.setText("‚è≥ ƒêang T·∫°o...")

        # Hi·ªÉn th·ªã progress bar
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)

        # T·∫°o v√† ch·∫°y worker thread
        self.worker_thread = ReportGenerationWorker(report_options)
        self.worker_thread.progress_updated.connect(self.progress_bar.setValue)
        self.worker_thread.status_updated.connect(self.status_label.setText)
        self.worker_thread.report_completed.connect(self.on_report_completed)
        self.worker_thread.start()

    def on_report_completed(self, success, message, report_data):
        """X·ª≠ l√Ω khi b√°o c√°o ho√†n th√†nh"""
        # K√≠ch ho·∫°t l·∫°i n√∫t
        self.generate_btn.setEnabled(True)
        self.generate_btn.setText("üöÄ T·∫°o B√°o C√°o")

        # ·∫®n progress bar
        self.progress_bar.setVisible(False)

        if success:
            # L∆∞u c√†i ƒë·∫∑t ng∆∞·ªùi d√πng khi xu·∫•t th√†nh c√¥ng
            self.save_user_preferences()

            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            QMessageBox.information(self, "Th√†nh c√¥ng", message)

            # M·ªü file n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if self.open_after_export_cb.isChecked() and self.export_excel_cb.isChecked():
                self.open_export_folder()

            # Hi·ªÉn th·ªã t√≥m t·∫Øt n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if self.show_summary_cb.isChecked():
                self.show_report_summary(report_data)

            # ƒê√≥ng dialog
            self.accept()
        else:
            # Hi·ªÉn th·ªã l·ªói
            QMessageBox.critical(self, "L·ªói", message)
            self.status_label.setText("C√≥ l·ªói x·∫£y ra")

    def open_export_folder(self):
        """M·ªü th∆∞ m·ª•c ch·ª©a file xu·∫•t"""
        try:
            # S·ª≠ d·ª•ng th∆∞ m·ª•c t√πy ch·ªânh n·∫øu c√≥, ng∆∞·ª£c l·∫°i d√πng m·∫∑c ƒë·ªãnh
            if self.export_folder and os.path.exists(self.export_folder):
                export_dir = self.export_folder
            else:
                export_dir = "src/data/exports"

            # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
            if not os.path.exists(export_dir):
                os.makedirs(export_dir, exist_ok=True)

            if os.name == 'nt':  # Windows
                os.startfile(export_dir)
            elif os.name == 'posix':  # macOS and Linux
                os.system(f'open "{export_dir}"')
        except Exception as e:
            QMessageBox.warning(self, "C·∫£nh b√°o", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c: {str(e)}")

    def show_report_summary(self, report_data):
        """Hi·ªÉn th·ªã t√≥m t·∫Øt b√°o c√°o"""
        summary_dialog = QDialog(self)
        summary_dialog.setWindowTitle("T√≥m T·∫Øt B√°o C√°o")
        summary_dialog.resize(500, 400)

        layout = QVBoxLayout(summary_dialog)

        # Text area ƒë·ªÉ hi·ªÉn th·ªã t√≥m t·∫Øt
        summary_text = QTextEdit()
        summary_text.setReadOnly(True)

        # T·∫°o n·ªôi dung t√≥m t·∫Øt
        summary_content = f"B√°o c√°o ƒë∆∞·ª£c t·∫°o l√∫c: {report_data.get('generated_at', 'N/A')}\n\n"

        sections = report_data.get('sections', {})
        if 'inventory' in sections:
            inv_data = sections['inventory']
            summary_content += f"üì¶ T·ªìn kho: {inv_data.get('total_items', 0)} m·∫∑t h√†ng\n"

        if 'employees' in sections:
            emp_data = sections['employees']
            summary_content += f"üë• Nh√¢n vi√™n: {emp_data.get('total_employees', 0)} ng∆∞·ªùi\n"

        if 'production' in sections:
            prod_data = sections['production']
            summary_content += f"üè≠ S·∫£n xu·∫•t: {prod_data.get('total_reports', 0)} b√°o c√°o\n"

        summary_text.setPlainText(summary_content)
        layout.addWidget(summary_text)

        # N√∫t ƒë√≥ng
        close_btn = QPushButton("ƒê√≥ng")
        close_btn.clicked.connect(summary_dialog.accept)
        layout.addWidget(close_btn)

        summary_dialog.exec_()
