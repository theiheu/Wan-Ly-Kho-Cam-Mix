#!/usr/bin/env python3
"""
Daily Report Calculator - T√≠nh to√°n b√°o c√°o ti√™u th·ª• h√†ng ng√†y
T√≠ch h·ª£p v·ªõi h·ªá th·ªëng cache ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
"""

import os
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional, List, Tuple
from collections import defaultdict

# Import cache manager
try:
    from src.services.report_cache_manager import report_cache_manager
except ImportError:
    from services.report_cache_manager import report_cache_manager

class DailyReportCalculator:
    """T√≠nh to√°n b√°o c√°o ti√™u th·ª• h√†ng ng√†y v·ªõi cache"""

    def __init__(self):
        """Kh·ªüi t·∫°o calculator"""
        self.data_dir = Path("src/data")
        self.reports_dir = self.data_dir / "reports"
        self.config_dir = self.data_dir / "config"

        # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
        for directory in [self.reports_dir, self.config_dir]:
            directory.mkdir(parents=True, exist_ok=True)

    def _load_json_file(self, file_path: Path) -> Dict:
        """T·∫£i file JSON v·ªõi x·ª≠ l√Ω l·ªói"""
        try:
            if file_path.exists() and file_path.stat().st_size > 0:
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError, UnicodeDecodeError) as e:
            print(f"L·ªói ƒë·ªçc file {file_path}: {e}")
        return {}

    def _calculate_area_totals(self, usage_data: Dict[str, Any]) -> Dict[str, Any]:
        """T√≠nh t·ªïng theo khu v·ª±c"""
        area_totals = {}
        grand_total = 0

        for area, farms in usage_data.items():
            area_total = 0
            farm_details = {}

            for farm, shifts in farms.items():
                farm_total = 0
                shift_details = {}

                for shift, amount in shifts.items():
                    amount_float = float(amount or 0)
                    shift_details[shift] = amount_float
                    farm_total += amount_float

                farm_details[farm] = {
                    'shifts': shift_details,
                    'total': farm_total
                }
                area_total += farm_total

            area_totals[area] = {
                'farms': farm_details,
                'total': area_total
            }
            grand_total += area_total

        return {
            'areas': area_totals,
            'grand_total': grand_total
        }

    def _calculate_shift_statistics(self, usage_data: Dict[str, Any]) -> Dict[str, Any]:
        """T√≠nh th·ªëng k√™ theo ca"""
        shift_stats = defaultdict(float)
        shift_counts = defaultdict(int)

        for area, farms in usage_data.items():
            for farm, shifts in farms.items():
                for shift, amount in shifts.items():
                    amount_float = float(amount or 0)
                    if amount_float > 0:
                        shift_stats[shift] += amount_float
                        shift_counts[shift] += 1

        # T√≠nh trung b√¨nh
        shift_averages = {}
        for shift in shift_stats:
            if shift_counts[shift] > 0:
                shift_averages[shift] = shift_stats[shift] / shift_counts[shift]
            else:
                shift_averages[shift] = 0

        return {
            'totals': dict(shift_stats),
            'averages': shift_averages,
            'counts': dict(shift_counts)
        }

    def _calculate_farm_rankings(self, usage_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """T√≠nh x·∫øp h·∫°ng tr·∫°i theo ti√™u th·ª•"""
        farm_totals = []

        for area, farms in usage_data.items():
            for farm, shifts in farms.items():
                farm_total = sum(float(amount or 0) for amount in shifts.values())
                if farm_total > 0:
                    farm_totals.append({
                        'area': area,
                        'farm': farm,
                        'total_consumption': farm_total,
                        'shift_breakdown': {shift: float(amount or 0) for shift, amount in shifts.items()}
                    })

        # S·∫Øp x·∫øp theo t·ªïng ti√™u th·ª• gi·∫£m d·∫ßn
        farm_totals.sort(key=lambda x: x['total_consumption'], reverse=True)

        # Th√™m th·ª© h·∫°ng
        for i, farm_data in enumerate(farm_totals, 1):
            farm_data['rank'] = i

        return farm_totals

    def _calculate_efficiency_metrics(self, raw_data: Dict[str, Any]) -> Dict[str, Any]:
        """T√≠nh c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ t·ª´ raw data"""
        # L·∫•y t·ªïng feed v√† mix t·ª´ raw data thay v√¨ t√≠nh t·ª´ feed_usage
        feed_total = float(raw_data.get('total_feed', 0))
        mix_total = float(raw_data.get('total_mix', 0))

        # T√≠nh t·ªïng ti√™u th·ª• theo tr·∫°i (ƒë·ªÉ so s√°nh)
        feed_usage = raw_data.get('feed_usage', {})
        feed_usage_total = sum(
            sum(float(amount or 0) for amount in shifts.values())
            for farms in feed_usage.values()
            for shifts in farms.values()
        )

        # Mix usage theo tr·∫°i (n·∫øu c√≥)
        mix_usage = raw_data.get('mix_usage', {})
        mix_usage_total = sum(
            sum(float(amount or 0) for amount in shifts.values())
            for farms in mix_usage.values()
            for shifts in farms.values()
        )

        total_consumption = feed_total + mix_total

        metrics = {
            'feed_total': feed_total,
            'mix_total': mix_total,
            'total_consumption': total_consumption,
            'feed_percentage': (feed_total / total_consumption * 100) if total_consumption > 0 else 0,
            'mix_percentage': (mix_total / total_consumption * 100) if total_consumption > 0 else 0,
            'feed_to_mix_ratio': feed_total / mix_total if mix_total > 0 else float('inf'),
            # Th√™m th√¥ng tin v·ªÅ ti√™u th·ª• theo tr·∫°i
            'feed_usage_total': feed_usage_total,
            'mix_usage_total': mix_usage_total,
            'feed_usage_percentage': (feed_usage_total / feed_total * 100) if feed_total > 0 else 0,
            'mix_usage_percentage': (mix_usage_total / mix_total * 100) if mix_total > 0 else 0
        }

        return metrics

    def calculate_daily_report(self, report_date: str, force_recalculate: bool = False) -> Optional[Dict[str, Any]]:
        """T√≠nh to√°n b√°o c√°o h√†ng ng√†y v·ªõi cache"""
        try:
            # Ki·ªÉm tra cache tr∆∞·ªõc n·∫øu kh√¥ng b·∫Øt bu·ªôc t√≠nh l·∫°i
            if not force_recalculate:
                cached_report = report_cache_manager.get_cached_report(report_date, "daily_consumption")
                if cached_report:
                    return cached_report

            print(f"üìä [Calculator] Calculating daily report for {report_date}...")

            # T·∫£i d·ªØ li·ªáu b√°o c√°o g·ªëc
            report_file = self.reports_dir / f"report_{report_date}.json"
            if not report_file.exists():
                print(f"Kh√¥ng t√¨m th·∫•y file b√°o c√°o: {report_file}")
                return None

            raw_data = self._load_json_file(report_file)
            if not raw_data:
                print(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ file: {report_file}")
                return None

            # B·∫Øt ƒë·∫ßu t√≠nh to√°n
            calculation_start = datetime.now()

            # T√≠nh to√°n cho feed usage
            feed_calculations = {}
            if 'feed_usage' in raw_data:
                feed_calculations = {
                    'area_totals': self._calculate_area_totals(raw_data['feed_usage']),
                    'shift_statistics': self._calculate_shift_statistics(raw_data['feed_usage']),
                    'farm_rankings': self._calculate_farm_rankings(raw_data['feed_usage'])
                }

            # T√≠nh to√°n cho mix usage
            mix_calculations = {}
            if 'mix_usage' in raw_data:
                mix_calculations = {
                    'area_totals': self._calculate_area_totals(raw_data['mix_usage']),
                    'shift_statistics': self._calculate_shift_statistics(raw_data['mix_usage']),
                    'farm_rankings': self._calculate_farm_rankings(raw_data['mix_usage'])
                }

            # T√≠nh c√°c ch·ªâ s·ªë hi·ªáu qu·∫£
            efficiency_metrics = self._calculate_efficiency_metrics(raw_data)

            # T√≠nh th·ªùi gian x·ª≠ l√Ω
            calculation_time = (datetime.now() - calculation_start).total_seconds()

            # T·∫°o b√°o c√°o t√≠nh to√°n ho√†n ch·ªânh
            calculated_report = {
                'metadata': {
                    'report_date': report_date,
                    'display_date': raw_data.get('display_date', ''),
                    'calculated_at': datetime.now().isoformat(),
                    'calculation_time_seconds': calculation_time,
                    'source_file': f"report_{report_date}.json",
                    'cache_enabled': True
                },
                'raw_data': raw_data,
                'feed_calculations': feed_calculations,
                'mix_calculations': mix_calculations,
                'efficiency_metrics': efficiency_metrics,
                'summary': {
                    'total_feed_consumption': efficiency_metrics['feed_total'],
                    'total_mix_consumption': efficiency_metrics['mix_total'],
                    'total_consumption': efficiency_metrics['total_consumption'],
                    'active_areas': len(raw_data.get('feed_usage', {})),
                    'active_farms': sum(
                        len(farms) for farms in raw_data.get('feed_usage', {}).values()
                    ),
                    'top_consuming_farm': feed_calculations.get('farm_rankings', [{}])[0] if feed_calculations.get('farm_rankings') else None
                }
            }

            # L∆∞u v√†o cache
            cache_success = report_cache_manager.cache_report(report_date, calculated_report, "daily_consumption")
            if cache_success:
                calculated_report['metadata']['cached'] = True

            print(f"‚úÖ [Calculator] Daily report calculated in {calculation_time:.2f}s for {report_date}")
            return calculated_report

        except Exception as e:
            print(f"L·ªói t√≠nh to√°n b√°o c√°o h√†ng ng√†y {report_date}: {e}")
            import traceback
            traceback.print_exc()
            return None

    def get_report_summary(self, report_date: str) -> Optional[Dict[str, Any]]:
        """L·∫•y t√≥m t·∫Øt b√°o c√°o (ch·ªâ metadata v√† summary)"""
        try:
            # Th·ª≠ l·∫•y t·ª´ cache tr∆∞·ªõc
            cached_report = report_cache_manager.get_cached_report(report_date, "daily_consumption")
            if cached_report:
                return {
                    'metadata': cached_report.get('metadata', {}),
                    'summary': cached_report.get('summary', {}),
                    'efficiency_metrics': cached_report.get('efficiency_metrics', {}),
                    'from_cache': True
                }

            # N·∫øu kh√¥ng c√≥ cache, t√≠nh to√°n ƒë·∫ßy ƒë·ªß
            full_report = self.calculate_daily_report(report_date)
            if full_report:
                return {
                    'metadata': full_report.get('metadata', {}),
                    'summary': full_report.get('summary', {}),
                    'efficiency_metrics': full_report.get('efficiency_metrics', {}),
                    'from_cache': False
                }

            return None

        except Exception as e:
            print(f"L·ªói l·∫•y t√≥m t·∫Øt b√°o c√°o {report_date}: {e}")
            return None

    def invalidate_report_cache(self, report_date: str) -> bool:
        """V√¥ hi·ªáu h√≥a cache cho m·ªôt b√°o c√°o c·ª• th·ªÉ"""
        try:
            removed_count = report_cache_manager.invalidate_cache(report_date, "daily_consumption")
            print(f"üóëÔ∏è [Calculator] Invalidated cache for {report_date} ({removed_count} entries)")
            return removed_count > 0
        except Exception as e:
            print(f"L·ªói v√¥ hi·ªáu h√≥a cache {report_date}: {e}")
            return False

    def get_available_reports(self) -> List[str]:
        """L·∫•y danh s√°ch c√°c b√°o c√°o c√≥ s·∫µn"""
        try:
            report_files = list(self.reports_dir.glob("report_*.json"))
            dates = []

            for file in report_files:
                date_str = file.stem.replace('report_', '')
                if len(date_str) == 8 and date_str.isdigit():
                    dates.append(date_str)

            return sorted(dates, reverse=True)  # M·ªõi nh·∫•t tr∆∞·ªõc

        except Exception as e:
            print(f"L·ªói l·∫•y danh s√°ch b√°o c√°o: {e}")
            return []

# Global instance
daily_report_calculator = DailyReportCalculator()

# Convenience functions
def calculate_daily_report(report_date: str, force_recalculate: bool = False) -> Optional[Dict[str, Any]]:
    """T√≠nh to√°n b√°o c√°o h√†ng ng√†y"""
    return daily_report_calculator.calculate_daily_report(report_date, force_recalculate)

def get_daily_report_summary(report_date: str) -> Optional[Dict[str, Any]]:
    """L·∫•y t√≥m t·∫Øt b√°o c√°o h√†ng ng√†y"""
    return daily_report_calculator.get_report_summary(report_date)

def invalidate_daily_report(report_date: str) -> bool:
    """V√¥ hi·ªáu h√≥a cache b√°o c√°o h√†ng ng√†y"""
    return daily_report_calculator.invalidate_report_cache(report_date)

def get_available_daily_reports() -> List[str]:
    """L·∫•y danh s√°ch b√°o c√°o c√≥ s·∫µn"""
    return daily_report_calculator.get_available_reports()
